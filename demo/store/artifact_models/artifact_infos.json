[
  {
    "name": "embedded_restricted",
    "description": "embedded_restricted",
    "resource_classes": {
      "DataAccessCommittee": {
        "name": "DataAccessCommittee",
        "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
        "anchor_point": {
          "target_class": "DataAccessCommittee",
          "identifier_slot": "accession",
          "root_slot": "data_access_committees"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "email": {
              "description": "Email of a person.",
              "type": "string"
            },
            "institute": {
              "description": "The institute a person is affiliated with.",
              "type": "string"
            }
          },
          "required": [
            "email",
            "institute",
            "alias",
            "accession"
          ],
          "title": "DataAccessCommittee",
          "type": "object",
          "$defs": {}
        }
      },
      "DataAccessPolicy": {
        "name": "DataAccessPolicy",
        "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
        "anchor_point": {
          "target_class": "DataAccessPolicy",
          "identifier_slot": "accession",
          "root_slot": "data_access_policies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "data_access_committee": {
              "description": "The Data Access Committee linked to this policy.",
              "type": "string"
            },
            "data_use_modifiers": {
              "description": "Modifier for Data use permission associated with a policy. Should be descendants of 'DUO:0000017 data use modifier'",
              "items": {
                "$ref": "#/$defs/DataUseModifierEnum"
              },
              "type": "array"
            },
            "data_use_permission": {
              "$ref": "#/$defs/DataUsePermissionEnum",
              "description": "Data use permission associated with a policy. Typically one or more terms from DUO and should be descendants of 'DUO:0000001 data use permission'."
            },
            "description": {
              "description": "A short description for the Data Access Policy.",
              "type": "string"
            },
            "name": {
              "description": "A name for the Data Access Policy.",
              "type": "string"
            },
            "policy_text": {
              "description": "The terms of data use and policy verbiage should be captured here.",
              "type": "string"
            },
            "policy_url": {
              "description": "URL for the policy, if available. This is useful if the terms of the policy is made available online at a resolvable URL.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "description",
            "policy_text",
            "data_access_committee",
            "data_use_permission",
            "alias",
            "accession"
          ],
          "title": "DataAccessPolicy",
          "type": "object",
          "$defs": {
            "DataUseModifierEnum": {
              "description": "Permitted values for data use modifier",
              "enum": [
                "clinical care use",
                "return to database or resource",
                "institution specific restriction",
                "project specific restriction",
                "user specific restriction",
                "time limit on use",
                "publication moratorium",
                "geographical restriction",
                "ethics approval required",
                "collaboration required",
                "publication required",
                "not for profit, non commercial use only",
                "non-commercial use only",
                "not for profit organisation use only",
                "genetic studies only",
                "no general methods research",
                "research specific restrictions",
                "population origins or ancestry research prohibited"
              ],
              "title": "DataUseModifierEnum",
              "type": "string"
            },
            "DataUsePermissionEnum": {
              "description": "Permitted values for data use permission",
              "enum": [
                "general research use",
                "health or medical or biomedical research",
                "disease specific research",
                "no restriction",
                "population origins or ancestry research only"
              ],
              "title": "DataUsePermissionEnum",
              "type": "string"
            }
          }
        }
      },
      "Biospecimen": {
        "name": "Biospecimen",
        "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
        "anchor_point": {
          "target_class": "Biospecimen",
          "identifier_slot": "accession",
          "root_slot": "biospecimens"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "age_at_sampling": {
              "$ref": "#/$defs/AgeRangeEnum",
              "description": "Age of an individual."
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "individual": {
              "description": "The Individual entity from which this Biospecimen was derived.",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "tissue": {
              "type": "string"
            },
            "type": {
              "description": "The type of Biospecimen.",
              "type": "string"
            },
            "vital_status_at_sampling": {
              "$ref": "#/$defs/VitalStatusEnum",
              "description": "Vital Status of an Individual at the point of sampling (eg:'Alive', 'Deceased')."
            }
          },
          "required": [
            "individual",
            "age_at_sampling",
            "tissue",
            "alias",
            "accession"
          ],
          "title": "Biospecimen",
          "type": "object",
          "$defs": {
            "AgeRangeEnum": {
              "description": "Enum to capture the age range that an Indiviudal belongs to.",
              "enum": [
                "0_TO_5",
                "6_TO_10",
                "11_TO_15",
                "16_TO_20",
                "21_TO_25",
                "26_TO_30",
                "31_TO_35",
                "36_TO_40",
                "41_TO_45",
                "46_TO_50",
                "51_TO_55",
                "56_TO_60",
                "61_TO_65",
                "66_TO_70",
                "71_TO_75",
                "76_TO_80",
                "81_OR_OLDER",
                "UNKNOWN"
              ],
              "title": "AgeRangeEnum",
              "type": "string"
            },
            "VitalStatusEnum": {
              "description": "Enum to capture the vital status of an individual.",
              "enum": [
                "ALIVE",
                "DECEASED",
                "UNKNOWN"
              ],
              "title": "VitalStatusEnum",
              "type": "string"
            }
          }
        }
      },
      "Sample": {
        "name": "Sample",
        "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
        "anchor_point": {
          "target_class": "Sample",
          "identifier_slot": "accession",
          "root_slot": "samples"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "biospecimen": {
              "description": "The Biospecimen from which this Sample was prepared from.",
              "type": "string"
            },
            "condition": {
              "description": "The condition associated with an entity.",
              "type": "string"
            },
            "description": {
              "description": "Short textual description of the sample (How the sample was collected, sample source, Protocol followed for processing the sample etc).",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "Name of the sample (eg:GHGAS_Blood_Sample1 or GHGAS_PBMC_RNAseq_S1).",
              "type": "string"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/SampleTypeEnum",
              "description": "The type of sample."
            },
            "xref": {
              "description": "One or more cross-references for this Sample. For example, this Sample may have an EBI BioSamples accession or an EGA Sample accession.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "description",
            "condition",
            "alias",
            "accession"
          ],
          "title": "Sample",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "SampleTypeEnum": {
              "description": "The type of a sample",
              "enum": [
                "CF_DNA",
                "DEPLETED_RNA",
                "DS_DNA_CH_IP",
                "FFPE_DNA",
                "FFPE_TOTAL_RNA",
                "GENOMIC_DNA",
                "PCR_PRODUCTS",
                "POLY_A_RNA",
                "SINGLE_CELL_DNA",
                "SINGLE_CELL_RNA",
                "SMALL_RNA",
                "TOTAL_RNA"
              ],
              "title": "SampleTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcess": {
        "name": "AnalysisProcess",
        "description": null,
        "anchor_point": {
          "target_class": "AnalysisProcess",
          "identifier_slot": "accession",
          "root_slot": "analysis_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis": {
              "description": "The Analysis the AnalysisProcess was part of",
              "type": "string"
            },
            "sample_input_files": {
              "description": "The SampleFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_input_files": {
              "description": "The SequencingProcessFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_input_files": {
              "description": "The StudyFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "analysis",
            "alias",
            "accession"
          ],
          "title": "AnalysisProcess",
          "type": "object",
          "$defs": {}
        }
      },
      "EmbeddedDataset": {
        "name": "EmbeddedDataset",
        "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
        "anchor_point": {
          "target_class": "EmbeddedDataset",
          "identifier_slot": "accession",
          "root_slot": "embedded_dataset"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "data_access_policy": {
              "$ref": "#/$defs/EmbeddedDataAccessPolicy",
              "description": "The Data Access Policy that applies to this Dataset."
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "title": {
              "description": "A title for the submitted Dataset.",
              "type": "string"
            },
            "types": {
              "description": "The type of a dataset.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "title",
            "description",
            "types",
            "data_access_policy",
            "alias",
            "accession"
          ],
          "title": "EmbeddedDataset",
          "type": "object",
          "$defs": {
            "EmbeddedDataAccessPolicy": {
              "additionalProperties": false,
              "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "data_access_committee": {
                  "$ref": "#/$defs/DataAccessCommittee",
                  "description": "The Data Access Committee linked to this policy."
                },
                "data_use_modifiers": {
                  "description": "Modifier for Data use permission associated with a policy. Should be descendants of 'DUO:0000017 data use modifier'",
                  "items": {
                    "$ref": "#/$defs/DataUseModifierEnum"
                  },
                  "type": "array"
                },
                "data_use_permission": {
                  "$ref": "#/$defs/DataUsePermissionEnum",
                  "description": "Data use permission associated with a policy. Typically one or more terms from DUO and should be descendants of 'DUO:0000001 data use permission'."
                },
                "description": {
                  "description": "A short description for the Data Access Policy.",
                  "type": "string"
                },
                "name": {
                  "description": "A name for the Data Access Policy.",
                  "type": "string"
                },
                "policy_text": {
                  "description": "The terms of data use and policy verbiage should be captured here.",
                  "type": "string"
                },
                "policy_url": {
                  "description": "URL for the policy, if available. This is useful if the terms of the policy is made available online at a resolvable URL.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "description",
                "policy_text",
                "data_access_committee",
                "data_use_permission",
                "alias",
                "accession"
              ],
              "title": "EmbeddedDataAccessPolicy",
              "type": "object"
            }
          }
        }
      },
      "SequencingExperiment": {
        "name": "SequencingExperiment",
        "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
        "anchor_point": {
          "target_class": "SequencingExperiment",
          "identifier_slot": "accession",
          "root_slot": "sequencing_experiments"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description of the Experiment.",
              "type": "string"
            },
            "library_preparation_protocol": {
              "description": "The library_preparation Protocol associated with an entity.",
              "type": "string"
            },
            "sequencing_protocol": {
              "description": "The sequencing protocol associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "Name for the experiment (eg: GHGAE_PBMC_RNAseq).",
              "type": "string"
            },
            "type": {
              "description": "The type of sequencing experiment.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "sequencing_protocol",
            "library_preparation_protocol",
            "alias",
            "accession"
          ],
          "title": "SequencingExperiment",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Analysis": {
        "name": "Analysis",
        "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
        "anchor_point": {
          "target_class": "Analysis",
          "identifier_slot": "accession",
          "root_slot": "analyses"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "description": {
              "description": "Describing how an Analysis was carried out. (e.g.: computational tools, settings, etc.).",
              "type": "string"
            },
            "reference_chromosome": {
              "description": "The reference chromosome used for this Analysis.",
              "type": "string"
            },
            "reference_genome": {
              "description": "A published genetic sequence that is used as a reference sequence against which other sequences are compared. Reference genome(s) or annotation(s) used for prior analyses (eg: GRCh38.p13).",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            },
            "type": {
              "description": "The type of the Analysis. Either Reference Alignment (BAM) or Sequence Variation (VCF)",
              "type": "string"
            }
          },
          "required": [
            "reference_genome",
            "reference_chromosome",
            "alias",
            "accession"
          ],
          "title": "Analysis",
          "type": "object",
          "$defs": {}
        }
      },
      "Dataset": {
        "name": "Dataset",
        "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
        "anchor_point": {
          "target_class": "Dataset",
          "identifier_slot": "accession",
          "root_slot": "datasets"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "data_access_policy": {
              "description": "The Data Access Policy that applies to this Dataset.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "title": {
              "description": "A title for the submitted Dataset.",
              "type": "string"
            },
            "types": {
              "description": "The type of a dataset.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "title",
            "description",
            "types",
            "data_access_policy",
            "alias",
            "accession"
          ],
          "title": "Dataset",
          "type": "object",
          "$defs": {}
        }
      },
      "Trio": {
        "name": "Trio",
        "description": "A trio is defined by three individuals representing an individual and their parents.",
        "anchor_point": {
          "target_class": "Trio",
          "identifier_slot": "accession",
          "root_slot": "trios"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A trio is defined by three individuals representing an individual and their parents.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "child": {
              "description": "The child of two individuals.",
              "type": "string"
            },
            "father": {
              "description": "The father of an individual.",
              "type": "string"
            },
            "mother": {
              "description": "The mother of an individual.",
              "type": "string"
            }
          },
          "required": [
            "mother",
            "father",
            "child",
            "alias",
            "accession"
          ],
          "title": "Trio",
          "type": "object",
          "$defs": {}
        }
      },
      "Condition": {
        "name": "Condition",
        "description": "An condition that is linked to comparable samples.",
        "anchor_point": {
          "target_class": "Condition",
          "identifier_slot": "accession",
          "root_slot": "conditions"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An condition that is linked to comparable samples.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "case_control_status": {
              "$ref": "#/$defs/CaseControlStatusEnum",
              "description": "Whether a condition corresponds to a treatment or a control."
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "disease_or_healthy": {
              "$ref": "#/$defs/DiseaseOrHealthyEnum",
              "description": "Whether a condition corresponds to a disease or a healthy state."
            },
            "mutant_or_wildtype": {
              "$ref": "#/$defs/MutantOrWildtypeEnum",
              "description": "Whether a condition corresponds to a mutant or a wildtype."
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "disease_or_healthy",
            "case_control_status",
            "mutant_or_wildtype",
            "study",
            "alias",
            "accession"
          ],
          "title": "Condition",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "CaseControlStatusEnum": {
              "description": "Enum to capture whether a condition corresponds to a case or a control condition.",
              "enum": [
                "NEITHER_CASE_OR_CONTROL_STATUS",
                "PROBABLE_CASE_STATUS",
                "PROBABLE_CONTROL_STATUS",
                "TRUE_CASE_STATUS",
                "TRUE_CONTROL_STATUS",
                "UNABLE_TO_ASSESS_CASE_OR_CONTROL_STATUS"
              ],
              "title": "CaseControlStatusEnum",
              "type": "string"
            },
            "DiseaseOrHealthyEnum": {
              "description": "Enum to capture whether a condition corresponds to a disease or a healthy state.",
              "enum": [
                "DISEASE",
                "HEALTHY",
                "NOT_APPLICABLE"
              ],
              "title": "DiseaseOrHealthyEnum",
              "type": "string"
            },
            "MutantOrWildtypeEnum": {
              "description": "Enum to capture whether a condition corresponds to a mutant or a wildtype.",
              "enum": [
                "MUTANT",
                "WILDTYPE",
                "NOT_APPLICABLE"
              ],
              "title": "MutantOrWildtypeEnum",
              "type": "string"
            }
          }
        }
      },
      "Study": {
        "name": "Study",
        "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
        "anchor_point": {
          "target_class": "Study",
          "identifier_slot": "accession",
          "root_slot": "studies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "affiliations": {
              "description": "The Institution(s) associated with an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Custom key/value pairs that further characterizes the Study. (e.g.: approaches - single-cell,_bulk_etc)",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description (abstract) that describes the goals of this Study.",
              "type": "string"
            },
            "title": {
              "description": "A comprehensive title for the study.",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/StudyTypeEnum",
              "description": "The type of Study. For example, 'Cancer Genomics', 'Epigenetics', 'Exome Sequencing'."
            }
          },
          "required": [
            "title",
            "description",
            "type",
            "affiliations",
            "alias",
            "accession"
          ],
          "title": "Study",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "StudyTypeEnum": {
              "description": "Enum to capture the type of a study.",
              "enum": [
                "CANCER_GENOMICS",
                "EPIGENETICS",
                "EXOME_SEQUENCING",
                "FORENSIC_GENETICS",
                "PALEO_GENOMICS",
                "GENE_REGULATION_STUDY",
                "METAGENOMICS",
                "OTHER",
                "POOLED_CLONE_SEQUENCING",
                "POPULATION_GENOMICS",
                "RNASEQ",
                "RESEQUENCING",
                "SYNTHETIC_GENOMICS",
                "TRANSCRIPTOME_ANALYSIS",
                "WHOLE_GENOME_SEQUENCING",
                "GWAS"
              ],
              "title": "StudyTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "LibraryPreparationProtocol": {
        "name": "LibraryPreparationProtocol",
        "description": "Information about the library_preparation of an sequencing experiment.",
        "anchor_point": {
          "target_class": "LibraryPreparationProtocol",
          "identifier_slot": "accession",
          "root_slot": "library_preparation_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the library_preparation of an sequencing experiment.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this library_preparation Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description about how a sequencing library was prepared (eg: Library construction method).",
              "type": "string"
            },
            "end_bias": {
              "$ref": "#/$defs/EndBiasEnum",
              "description": "The end of the cDNA molecule that is preferentially sequenced, e.g. 3/5 prime tag or end, or the full-length transcript."
            },
            "library_layout": {
              "$ref": "#/$defs/LibraryPreparationLibraryLayoutEnum",
              "description": "Describe whether the library was sequenced in single-end (forward or reverse) or paired-end mode"
            },
            "library_name": {
              "description": "A short name identifying the library to potential users. The same name may refer to multiple versions of the same continually updated library.",
              "type": "string"
            },
            "library_preparation": {
              "description": "The general method for sequencing library_preparation (e.g. KAPA PCR-free).",
              "type": "string"
            },
            "library_preparation_kit_manufacturer": {
              "description": "Manufacturer of library_preparation kit",
              "type": "string"
            },
            "library_preparation_kit_retail_name": {
              "$ref": "#/$defs/LibraryPreparationKitRetailNameEnum",
              "description": "A unique identifier for the kit used to construct a genomic library. This may include the vendor name, kit name and kit version (e.g. Agilent sure select Human Exome V8, Twist RefSeq Exome, etc.)"
            },
            "library_selection": {
              "$ref": "#/$defs/LibraryPreparationLibrarySelectionEnum",
              "description": "Whether any method was used to select for or against, enrich, or screen the material being sequenced. library_selection method (e.g. random, PCA, cDNA, etc )"
            },
            "library_type": {
              "$ref": "#/$defs/LibraryPreparationLibraryTypeEnum",
              "description": "Describe the level of omics analysis (eg: Metagenome, transcriptome, etc)"
            },
            "primer": {
              "$ref": "#/$defs/PrimerEnum",
              "description": "The type of primer used for reverse transcription, e.g. 'oligo-dT' or 'random' primer. This allows users to identify content of the cDNA library input e.g. enriched for mRNA."
            },
            "rnaseq_strandedness": {
              "$ref": "#/$defs/LibraryPreparationRNASeqStrandednessEnum",
              "description": "The strandedness of the library, whether reads come from both strands of the cDNA or only from the first (antisense) or the second (sense) strand."
            },
            "target_regions": {
              "description": "Subset of genes or specific regions of the genome, which are most likely to be involved in the phenotype under study.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "description",
            "library_name",
            "library_layout",
            "library_type",
            "library_selection",
            "library_preparation",
            "alias",
            "accession"
          ],
          "title": "LibraryPreparationProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "EndBiasEnum": {
              "description": "Permitted values for end bias",
              "enum": [
                "3_PRIME_END",
                "5_PRIME_END",
                "FULL_LENGTH"
              ],
              "title": "EndBiasEnum",
              "type": "string"
            },
            "LibraryPreparationKitRetailNameEnum": {
              "description": "Permitted values for library preparation kit retail name",
              "enum": [
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V2",
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V3",
                "ACCEL_NGS_2_S_PLUS_DNA_LIBRARY_KIT",
                "ACCEL_NGS_METHYL_SEQ_DNA",
                "AGILENT_STRAND_SPECIFIC_RNA",
                "AGILENT_SURE_SELECT_CUSTOM_ENRICHMENT_KIT",
                "AGILENT_SURE_SELECT_V3",
                "AGILENT_SURE_SELECT_V4",
                "AGILENT_SURE_SELECT_V4_UT_RS",
                "AGILENT_SURE_SELECT_V5",
                "AGILENT_SURE_SELECT_V5_UT_RS",
                "AGILENT_SURE_SELECT_V6",
                "AGILENT_SURE_SELECT_V6_ONE",
                "AGILENT_SURE_SELECT_V6_UT_RS",
                "AGILENT_SURE_SELECT_V7",
                "AGILENT_SURE_SELECT_WGS",
                "AGILENT_SURE_SELECT_XT_HS_HUMAN_ALL_EXON_V7",
                "AGILENT_SURE_SELECT_XT_MOUSE_ALL_EXON",
                "AGILENT_XT_HS_SURE_SELECT_CLINICAL_RESEARCH_EXOME_V2",
                "AVENIO_CT_DNA_KIT",
                "IDT_X_GEN_EXOME_RESEARCH_PANEL",
                "ILLUMINA_DNA_PCR_FREE",
                "ILLUMINA_NEXTERA_DNA_FLEX",
                "ILLUMINA_NEXTERA_EXOME_ENRICHMENT_KIT",
                "ILLUMINA_STRANDED_M_RNA_PREP_LIGATION",
                "ILLUMINA_TRU_SEQ_CH_IP_SAMPLE_PREPARATION_KIT",
                "ILLUMINA_TRU_SEQ_CUSTOM_AMPLICON",
                "ILLUMINA_TRU_SEQ_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA_HT",
                "ILLUMINA_TRU_SEQ_NANO_DNA_LT",
                "ILLUMINA_TRU_SEQ_NANO_FFPE_DNA",
                "ILLUMINA_TRU_SEQ_PCR_FREE",
                "ILLUMINA_TRU_SEQ_PCR_FREE_DNA",
                "ILLUMINA_TRUSEQ_PCR_FREE_METHYL",
                "ILLUMINA_TRU_SEQ_RNA",
                "ILLUMINA_TRU_SEQ_SMALL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_LIBRARY_PREP_GLOBIN",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_RIBO_MINUS_GOLD",
                "ILLUMINA_VAHTS_TOTAL_RNA",
                "INFORM_ONCO_PANEL_HG19",
                "ION_AMPLI_SEQ_EXOME_KIT",
                "KAPA_HIFI_HOT_START_READYMIX",
                "KAPA_HYPER_PREP_KIT",
                "KAPA_HYPER_PLUS_KIT",
                "KAPA_M_RNA_HYPER_PREP_KIT",
                "MAGNETIC_METHYLATED_DNA_IMMUNOPRECIPITATION_DIAGNODE",
                "NEB_NEXT_CH_IP_SEQ_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_GLOBIN_R_RNA_DEPLETION_KIT_HUMAN_MOUSE_RAT_WITH_BEADS",
                "NEB_NEXT_POLY_A_M_RNA_MAGNETIC_ISOLATION_MODULE",
                "NEB_NEXT_RNA_ULTRA_II_STRANDED",
                "NEBNEXT_ULTRA_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_DNA",
                "NEB_NEXT_ULTRA_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_ULTRA_II_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_II_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEXTERA_XT_DNA",
                "OLIGO_D_T",
                "PICO_METHYL_SEQ",
                "SMART_SEQ_V4_ULTRA_LOW_INPUT_RNA_KIT",
                "SMAR_TER_STRANDED_TOTAL_RNA_SEQ_KIT",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_V4_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TSEQ2_TAG",
                "SUPER_SCRIPT_II_RT_BULK",
                "SURE_CELL_ATAC_SEQ_LIBRARY_PREP_KIT",
                "SURE_SELECT_EUROFINS_ENRICHMENT_CUSTOM_01",
                "TAKARA_CLONTECH_SMAR_TER_STRANDED_TOTAL_RNA",
                "TAKARA_SMAR_TER_PREP_X_DNA_LIBRARY_KIT_ACTIVE_MOTIF_CUSTOM_INDICES_01",
                "TEMPLATE_SWITCHING_RT_ENZYME_MIX_BULK",
                "TWIST_HUMAN_CORE_EXOME_PLUS_KIT",
                "ULTRALOW_METHYL_SEQ_WITH_TRUE_METHYL_OX_BS_MODULE"
              ],
              "title": "LibraryPreparationKitRetailNameEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryLayoutEnum": {
              "description": "Single-end vs paired-end library",
              "enum": [
                "SE",
                "PE"
              ],
              "title": "LibraryPreparationLibraryLayoutEnum",
              "type": "string"
            },
            "LibraryPreparationLibrarySelectionEnum": {
              "description": "Permitted vocabulary for library selections",
              "enum": [
                "5_METHYLCYTIDINE_ANTIBODY_METHOD",
                "CAGE_METHOD",
                "C_DNA_METHOD",
                "CF_H_METHOD",
                "CF_M_METHOD",
                "CF_S_METHOD",
                "CF_T_METHOD",
                "CH_IP_SEQ_METHOD",
                "D_NASE_METHOD",
                "HMPR_METHOD",
                "HYBRID_SELECTION_METHOD",
                "INVERSE_R_RNA",
                "MBD2_PROTEIN_METHYL_CP_G_BINDING_DOMAIN_METHOD",
                "MDA",
                "MF_METHOD",
                "M_NASE_METHOD",
                "MSLL_METHOD",
                "OLIGO_D_T",
                "PADLOCK_PROBES_CAPTURE_METHOD",
                "PCR_METHOD",
                "POLY_A",
                "RACE_METHOD",
                "RANDOM_PCR_METHOD",
                "RANDOM_METHOD",
                "RT_PCR_METHOD",
                "REDUCED_REPRESENTATION_METHOD",
                "REPEAT_FRACTIONATION",
                "RESTRICTION_DIGEST_METHOD",
                "SIZE_FRACTIONATION_METHOD",
                "UNSPECIFIED",
                "OTHER"
              ],
              "title": "LibraryPreparationLibrarySelectionEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryTypeEnum": {
              "description": "The type of the library",
              "enum": [
                "WGS",
                "WXS",
                "WCS",
                "TOTAL_RNA",
                "M_RNA",
                "MI_RNA",
                "NC_RNA",
                "ATAC",
                "METHYLATION",
                "CHROMOSOME_CONFORMATION_CAPTURE"
              ],
              "title": "LibraryPreparationLibraryTypeEnum",
              "type": "string"
            },
            "LibraryPreparationRNASeqStrandednessEnum": {
              "description": "Permitted values for library preparation RNASeq strandedness",
              "enum": [
                "SENSE",
                "ANTISENSE",
                "BOTH"
              ],
              "title": "LibraryPreparationRNASeqStrandednessEnum",
              "type": "string"
            },
            "PrimerEnum": {
              "description": "Permitted values for primer",
              "enum": [
                "OLIGO_D_T",
                "RANDOM",
                "GENE_SPECIFIC",
                "OTHER"
              ],
              "title": "PrimerEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcess": {
        "name": "SequencingProcess",
        "description": "A sequencing process linking a sample to sequencing output.",
        "anchor_point": {
          "target_class": "SequencingProcess",
          "identifier_slot": "accession",
          "root_slot": "sequencing_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sequencing process linking a sample to sequencing output.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "index_sequence": {
              "description": "A unique nucleotide sequence that is added to a sample during library_preparation to serve as a unique identifier for the sample.",
              "type": "string"
            },
            "lane_number": {
              "description": "The numerical identifier for the lane or machine unit where a sample was located during nucleotide sequencing.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "sequencing_experiment": {
              "description": "The sequencing experiment associated with an entity.",
              "type": "string"
            },
            "sequencing_lane_id": {
              "description": "Identifier of the sequencing lane. Used for batch correction.",
              "type": "string"
            },
            "sequencing_machine_id": {
              "description": "Identifier of the sequencing machine. Used for batch correction.",
              "type": "string"
            },
            "sequencing_run_id": {
              "description": "Identifier of the sequencing run. Used for batch correction.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "sequencing_experiment",
            "sample",
            "alias",
            "accession"
          ],
          "title": "SequencingProcess",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Individual": {
        "name": "Individual",
        "description": "An Individual is a Person who is participating in a Study.",
        "anchor_point": {
          "target_class": "Individual",
          "identifier_slot": "accession",
          "root_slot": "individuals"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Individual is a Person who is participating in a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "ancestries": {
              "description": "A person's descent or lineage, from a person or from a population.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "geographical_region": {
              "description": "The geographical region where the Individual is located. Any demarcated area of the Earth; may be determined by both natural and human boundaries.",
              "type": "string"
            },
            "karyotype": {
              "$ref": "#/$defs/KaryotypeEnum",
              "description": "The karyotype of an individual if defined."
            },
            "phenotypic_features": {
              "description": "The Phenotypic Feature entity that is associated with this Biospecimen at the time of retrieval from the organism. Typically, a concept from Human Phenotype Ontology. For example, 'HP:0100244' indicates that the Individual - from_which_the_Biospecimen was extracted from - exhibits_'Fibrosarcoma'_as_one_of_its_phenotype.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sex": {
              "$ref": "#/$defs/IndividualSexEnum",
              "description": "The assemblage of physical properties or qualities by which male is distinguished from female; the physical difference between male and female; the distinguishing peculiarity of male or female."
            }
          },
          "required": [
            "sex",
            "alias",
            "accession"
          ],
          "title": "Individual",
          "type": "object",
          "$defs": {
            "IndividualSexEnum": {
              "description": "The sex of an Individual as as defined in a specific medical and clinical context.",
              "enum": [
                "FEMALE_SEX_FOR_CLINICAL_USE",
                "IMAGING_SEX",
                "MALE_SEX_FOR_CLINICAL_USE",
                "SPECIFIED_SEX_FOR_CLINICAL_USE",
                "UNKNOWN_SEX_FOR_CLINICAL_USE"
              ],
              "title": "IndividualSexEnum",
              "type": "string"
            },
            "KaryotypeEnum": {
              "description": "Permitted values for karyotype",
              "enum": [
                "46_XY",
                "46_XX",
                "OTHER"
              ],
              "title": "KaryotypeEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcessFile": {
        "name": "SequencingProcessFile",
        "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
        "anchor_point": {
          "target_class": "SequencingProcessFile",
          "identifier_slot": "accession",
          "root_slot": "sequencing_process_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sequencing_process": {
              "description": "The SequencingProcess associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sequencing_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SequencingProcessFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProtocol": {
        "name": "SequencingProtocol",
        "description": "Information about the sequencing of a sample.",
        "anchor_point": {
          "target_class": "SequencingProtocol",
          "identifier_slot": "accession",
          "root_slot": "sequencing_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the sequencing of a sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this Sequencing Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "cell_barcode_offset": {
              "description": "The offset in sequence of the cell identifying barcode. (Eg. '0').",
              "type": "string"
            },
            "cell_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the cell barcode (eg: index1/index2/read1/read2)."
            },
            "cell_barcode_size": {
              "description": "The size of the cell identifying barcode (E.g. '16').",
              "type": "string"
            },
            "description": {
              "description": "Description about the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "flow_cell_id": {
              "description": "Flow Cell ID (eg: Experiment ID_Cell 1_Lane_1). The barcode assigned to a flow cell used in nucleotide sequencing.",
              "type": "string"
            },
            "flow_cell_type": {
              "$ref": "#/$defs/FlowCellTypeEnum",
              "description": "Type of flow cell used (e.g. S4, S2 for NovaSeq; PromethION, Flongle for Nanopore). Aparatus in the fluidic subsystem where the sheath and sample meet. Can be one of several types; jet-in-air, quartz cuvette, or a hybrid of the two. The sample flows through the center of a fluid column of sheath fluid in the flow cell."
            },
            "instrument_model": {
              "$ref": "#/$defs/InstrumentModelEnum",
              "description": "The name and model of the technology platform used to perform sequencing."
            },
            "sample_barcode_read": {
              "$ref": "#/$defs/SampleBarcodeReadEnum",
              "description": "The type of read that contains the sample barcode (eg: index1/index2/read1/read2)."
            },
            "sequencing_center": {
              "description": "Center where sample was sequenced.",
              "type": "string"
            },
            "sequencing_read_length": {
              "description": "Length of sequencing reads (eg: Long or short or actual number of the read length etc). The number of nucleotides successfully ordered from each side of a nucleic acid fragment obtained after the completion of a sequencing process",
              "type": "string"
            },
            "target_coverage": {
              "description": "Mean coverage for whole genome sequencing, or mean target coverage for whole exome and targeted sequencing. The number of times a particular locus (site, nucleotide, amplicon, region) was sequenced.",
              "type": "string"
            },
            "type": {
              "description": "Type of the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "umi_barcode_offset": {
              "description": "The offset in sequence of the UMI identifying barcode. (E.g. '16').",
              "type": "string"
            },
            "umi_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the UMI barcode (Eg: index1/index2/read1/read2)."
            },
            "umi_barcode_size": {
              "description": "The size of the UMI identifying barcode (Eg. '10').",
              "type": "string"
            }
          },
          "required": [
            "description",
            "instrument_model",
            "alias",
            "accession"
          ],
          "title": "SequencingProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "FlowCellTypeEnum": {
              "description": "Permitted values for flow cell type",
              "enum": [
                "ILLUMINA_NOVA_SEQ_S2",
                "ILLUMINA_NOVA_SEQ_S4",
                "PROMETH_ION",
                "FLONGLE",
                "MIN_ION",
                "GRID_ION",
                "OTHER"
              ],
              "title": "FlowCellTypeEnum",
              "type": "string"
            },
            "IndexReadEnum": {
              "description": "Permitted Values to indicate the location of a sequence component in a read or index",
              "enum": [
                "INDEX1",
                "INDEX2",
                "READ1",
                "READ2"
              ],
              "title": "IndexReadEnum",
              "type": "string"
            },
            "InstrumentModelEnum": {
              "description": "Permitted values for instrument model",
              "enum": [
                "ILLUMINA_HI_SCAN",
                "ILLUMINA_HI_SEQ_1000",
                "ILLUMINA_HI_SEQ_1500",
                "ILLUMINA_HI_SEQ_2000",
                "ILLUMINA_HI_SEQ_2500",
                "ILLUMINA_HI_SEQ_3000",
                "ILLUMINA_HI_SEQ_4000",
                "ILLUMINA_HI_SEQ_X_FIVE",
                "ILLUMINA_HI_SEQ_X_TEN",
                "ILLUMINA_HI_SEQ_X",
                "ILLUMINA_I_SCAN",
                "ILLUMINA_I_SEQ_100",
                "ILLUMINA_MINI_SEQ",
                "ILLUMINA_MI_SEQ",
                "ILLUMINA_MI_SEQ_DX",
                "ILLUMINA_MI_SEQ_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_500",
                "ILLUMINA_NEXT_SEQ_550",
                "ILLUMINA_NEXT_SEQ_550_DX",
                "ILLUMINA_NEXT_SEQ_550_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_1000",
                "ILLUMINA_NEXT_SEQ_2000",
                "ILLUMINA_NOVA_SEQ_6000",
                "ILLUMINA_GENOME_ANALYZER",
                "ILLUMINA_GENOME_ANALYZER_II",
                "ILLUMINA_GENOME_ANALYZER_IIX",
                "ILLUMINA_HI_SCAN_SQ",
                "PAC_BIO_REVIO",
                "PAC_BIO_ONSO",
                "PAC_BIO_SEQUEL_IIE",
                "PAC_BIO_SEQUEL_II",
                "PAC_BIO_SEQUEL",
                "PAC_BIO_RS",
                "PAC_BIO_RS_II",
                "ONT_MIN_ION",
                "ONT_GRID_ION",
                "ONT_PROMETH_ION",
                "DNBSEQ_G50",
                "DNBSEQ_T7",
                "DNBSEQ_G400",
                "DNBSEQ_G400_FAST",
                "ULTIMA_UG_100",
                "OTHER"
              ],
              "title": "InstrumentModelEnum",
              "type": "string"
            },
            "SampleBarcodeReadEnum": {
              "description": "Permitted values for sample barcode read",
              "enum": [
                "INDEX1",
                "INDEX1_AND_INDEX2",
                "OTHER"
              ],
              "title": "SampleBarcodeReadEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcessOutputFile": {
        "name": "AnalysisProcessOutputFile",
        "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
        "anchor_point": {
          "target_class": "AnalysisProcessOutputFile",
          "identifier_slot": "accession",
          "root_slot": "analysis_process_output_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process": {
              "description": "The AnalysisProcess associated with an entity.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "analysis_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "AnalysisProcessOutputFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SampleFile": {
        "name": "SampleFile",
        "description": "A SampleFile is a File that is associated with a Sample.",
        "anchor_point": {
          "target_class": "SampleFile",
          "identifier_slot": "accession",
          "root_slot": "sample_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SampleFile is a File that is associated with a Sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sample",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SampleFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "StudyFile": {
        "name": "StudyFile",
        "description": "A StudyFile is a File that is associated with a Study.",
        "anchor_point": {
          "target_class": "StudyFile",
          "identifier_slot": "accession",
          "root_slot": "study_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A StudyFile is a File that is associated with a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            }
          },
          "required": [
            "study",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "StudyFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "Publication": {
        "name": "Publication",
        "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
        "anchor_point": {
          "target_class": "Publication",
          "identifier_slot": "accession",
          "root_slot": "publications"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
          "properties": {
            "abstract": {
              "description": "The study abstract that describes the goals. Can also hold abstract from a publication related to this study.",
              "type": "string"
            },
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "author": {
              "description": "The individual who is responsible for the content of a document version.",
              "type": "string"
            },
            "doi": {
              "description": "DOI identifier of the Publication.",
              "type": "string"
            },
            "journal": {
              "description": "Name of the journal.",
              "type": "string"
            },
            "study": {
              "description": "The Study entity associated with this Publication.",
              "type": "string"
            },
            "title": {
              "description": "The title for the Publication.",
              "type": "string"
            },
            "xref": {
              "description": "One or more cross-references for this Publication.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "year": {
              "description": "Year in which the paper was published.",
              "type": "integer"
            }
          },
          "required": [
            "doi",
            "study",
            "alias",
            "accession"
          ],
          "title": "Publication",
          "type": "object",
          "$defs": {}
        }
      }
    }
  },
  {
    "name": "resolved_restricted",
    "description": "resolved_restricted",
    "resource_classes": {
      "DataAccessCommittee": {
        "name": "DataAccessCommittee",
        "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
        "anchor_point": {
          "target_class": "DataAccessCommittee",
          "identifier_slot": "accession",
          "root_slot": "data_access_committees"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "email": {
              "description": "Email of a person.",
              "type": "string"
            },
            "institute": {
              "description": "The institute a person is affiliated with.",
              "type": "string"
            }
          },
          "required": [
            "email",
            "institute",
            "alias",
            "accession"
          ],
          "title": "DataAccessCommittee",
          "type": "object",
          "$defs": {}
        }
      },
      "DataAccessPolicy": {
        "name": "DataAccessPolicy",
        "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
        "anchor_point": {
          "target_class": "DataAccessPolicy",
          "identifier_slot": "accession",
          "root_slot": "data_access_policies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "data_access_committee": {
              "description": "The Data Access Committee linked to this policy.",
              "type": "string"
            },
            "data_use_modifiers": {
              "description": "Modifier for Data use permission associated with a policy. Should be descendants of 'DUO:0000017 data use modifier'",
              "items": {
                "$ref": "#/$defs/DataUseModifierEnum"
              },
              "type": "array"
            },
            "data_use_permission": {
              "$ref": "#/$defs/DataUsePermissionEnum",
              "description": "Data use permission associated with a policy. Typically one or more terms from DUO and should be descendants of 'DUO:0000001 data use permission'."
            },
            "description": {
              "description": "A short description for the Data Access Policy.",
              "type": "string"
            },
            "name": {
              "description": "A name for the Data Access Policy.",
              "type": "string"
            },
            "policy_text": {
              "description": "The terms of data use and policy verbiage should be captured here.",
              "type": "string"
            },
            "policy_url": {
              "description": "URL for the policy, if available. This is useful if the terms of the policy is made available online at a resolvable URL.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "description",
            "policy_text",
            "data_access_committee",
            "data_use_permission",
            "alias",
            "accession"
          ],
          "title": "DataAccessPolicy",
          "type": "object",
          "$defs": {
            "DataUseModifierEnum": {
              "description": "Permitted values for data use modifier",
              "enum": [
                "clinical care use",
                "return to database or resource",
                "institution specific restriction",
                "project specific restriction",
                "user specific restriction",
                "time limit on use",
                "publication moratorium",
                "geographical restriction",
                "ethics approval required",
                "collaboration required",
                "publication required",
                "not for profit, non commercial use only",
                "non-commercial use only",
                "not for profit organisation use only",
                "genetic studies only",
                "no general methods research",
                "research specific restrictions",
                "population origins or ancestry research prohibited"
              ],
              "title": "DataUseModifierEnum",
              "type": "string"
            },
            "DataUsePermissionEnum": {
              "description": "Permitted values for data use permission",
              "enum": [
                "general research use",
                "health or medical or biomedical research",
                "disease specific research",
                "no restriction",
                "population origins or ancestry research only"
              ],
              "title": "DataUsePermissionEnum",
              "type": "string"
            }
          }
        }
      },
      "Biospecimen": {
        "name": "Biospecimen",
        "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
        "anchor_point": {
          "target_class": "Biospecimen",
          "identifier_slot": "accession",
          "root_slot": "biospecimens"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "age_at_sampling": {
              "$ref": "#/$defs/AgeRangeEnum",
              "description": "Age of an individual."
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "individual": {
              "description": "The Individual entity from which this Biospecimen was derived.",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "tissue": {
              "type": "string"
            },
            "type": {
              "description": "The type of Biospecimen.",
              "type": "string"
            },
            "vital_status_at_sampling": {
              "$ref": "#/$defs/VitalStatusEnum",
              "description": "Vital Status of an Individual at the point of sampling (eg:'Alive', 'Deceased')."
            }
          },
          "required": [
            "individual",
            "age_at_sampling",
            "tissue",
            "alias",
            "accession",
            "samples"
          ],
          "title": "Biospecimen",
          "type": "object",
          "$defs": {
            "AgeRangeEnum": {
              "description": "Enum to capture the age range that an Indiviudal belongs to.",
              "enum": [
                "0_TO_5",
                "6_TO_10",
                "11_TO_15",
                "16_TO_20",
                "21_TO_25",
                "26_TO_30",
                "31_TO_35",
                "36_TO_40",
                "41_TO_45",
                "46_TO_50",
                "51_TO_55",
                "56_TO_60",
                "61_TO_65",
                "66_TO_70",
                "71_TO_75",
                "76_TO_80",
                "81_OR_OLDER",
                "UNKNOWN"
              ],
              "title": "AgeRangeEnum",
              "type": "string"
            },
            "VitalStatusEnum": {
              "description": "Enum to capture the vital status of an individual.",
              "enum": [
                "ALIVE",
                "DECEASED",
                "UNKNOWN"
              ],
              "title": "VitalStatusEnum",
              "type": "string"
            }
          }
        }
      },
      "Sample": {
        "name": "Sample",
        "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
        "anchor_point": {
          "target_class": "Sample",
          "identifier_slot": "accession",
          "root_slot": "samples"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "biospecimen": {
              "description": "The Biospecimen from which this Sample was prepared from.",
              "type": "string"
            },
            "condition": {
              "description": "The condition associated with an entity.",
              "type": "string"
            },
            "description": {
              "description": "Short textual description of the sample (How the sample was collected, sample source, Protocol followed for processing the sample etc).",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "Name of the sample (eg:GHGAS_Blood_Sample1 or GHGAS_PBMC_RNAseq_S1).",
              "type": "string"
            },
            "sample_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/SampleTypeEnum",
              "description": "The type of sample."
            },
            "xref": {
              "description": "One or more cross-references for this Sample. For example, this Sample may have an EBI BioSamples accession or an EGA Sample accession.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "description",
            "condition",
            "alias",
            "accession",
            "sample_files",
            "sequencing_processes"
          ],
          "title": "Sample",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "SampleTypeEnum": {
              "description": "The type of a sample",
              "enum": [
                "CF_DNA",
                "DEPLETED_RNA",
                "DS_DNA_CH_IP",
                "FFPE_DNA",
                "FFPE_TOTAL_RNA",
                "GENOMIC_DNA",
                "PCR_PRODUCTS",
                "POLY_A_RNA",
                "SINGLE_CELL_DNA",
                "SINGLE_CELL_RNA",
                "SMALL_RNA",
                "TOTAL_RNA"
              ],
              "title": "SampleTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcess": {
        "name": "AnalysisProcess",
        "description": null,
        "anchor_point": {
          "target_class": "AnalysisProcess",
          "identifier_slot": "accession",
          "root_slot": "analysis_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis": {
              "description": "The Analysis the AnalysisProcess was part of",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sample_input_files": {
              "description": "The SampleFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_input_files": {
              "description": "The SequencingProcessFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_input_files": {
              "description": "The StudyFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "analysis",
            "alias",
            "accession",
            "analysis_process_output_files"
          ],
          "title": "AnalysisProcess",
          "type": "object",
          "$defs": {}
        }
      },
      "SequencingExperiment": {
        "name": "SequencingExperiment",
        "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
        "anchor_point": {
          "target_class": "SequencingExperiment",
          "identifier_slot": "accession",
          "root_slot": "sequencing_experiments"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description of the Experiment.",
              "type": "string"
            },
            "library_preparation_protocol": {
              "description": "The library_preparation Protocol associated with an entity.",
              "type": "string"
            },
            "sequencing_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_protocol": {
              "description": "The sequencing protocol associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "Name for the experiment (eg: GHGAE_PBMC_RNAseq).",
              "type": "string"
            },
            "type": {
              "description": "The type of sequencing experiment.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "sequencing_protocol",
            "library_preparation_protocol",
            "alias",
            "accession",
            "sequencing_processes"
          ],
          "title": "SequencingExperiment",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Analysis": {
        "name": "Analysis",
        "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
        "anchor_point": {
          "target_class": "Analysis",
          "identifier_slot": "accession",
          "root_slot": "analyses"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": {
              "description": "Describing how an Analysis was carried out. (e.g.: computational tools, settings, etc.).",
              "type": "string"
            },
            "reference_chromosome": {
              "description": "The reference chromosome used for this Analysis.",
              "type": "string"
            },
            "reference_genome": {
              "description": "A published genetic sequence that is used as a reference sequence against which other sequences are compared. Reference genome(s) or annotation(s) used for prior analyses (eg: GRCh38.p13).",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            },
            "type": {
              "description": "The type of the Analysis. Either Reference Alignment (BAM) or Sequence Variation (VCF)",
              "type": "string"
            }
          },
          "required": [
            "reference_genome",
            "reference_chromosome",
            "alias",
            "accession",
            "analysis_processes"
          ],
          "title": "Analysis",
          "type": "object",
          "$defs": {}
        }
      },
      "Dataset": {
        "name": "Dataset",
        "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
        "anchor_point": {
          "target_class": "Dataset",
          "identifier_slot": "accession",
          "root_slot": "datasets"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "data_access_policy": {
              "description": "The Data Access Policy that applies to this Dataset.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "files": {
              "description": "All files associated with the dataset.",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              },
              "type": "array"
            },
            "sample_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studies": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A title for the submitted Dataset.",
              "type": "string"
            },
            "types": {
              "description": "The type of a dataset.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "title",
            "description",
            "types",
            "data_access_policy",
            "alias",
            "accession",
            "analysis_process_output_files",
            "sequencing_process_files",
            "study_files",
            "studies",
            "sample_files",
            "samples",
            "files"
          ],
          "title": "Dataset",
          "type": "object",
          "$defs": {}
        }
      },
      "Trio": {
        "name": "Trio",
        "description": "A trio is defined by three individuals representing an individual and their parents.",
        "anchor_point": {
          "target_class": "Trio",
          "identifier_slot": "accession",
          "root_slot": "trios"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A trio is defined by three individuals representing an individual and their parents.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "child": {
              "description": "The child of two individuals.",
              "type": "string"
            },
            "father": {
              "description": "The father of an individual.",
              "type": "string"
            },
            "mother": {
              "description": "The mother of an individual.",
              "type": "string"
            }
          },
          "required": [
            "mother",
            "father",
            "child",
            "alias",
            "accession"
          ],
          "title": "Trio",
          "type": "object",
          "$defs": {}
        }
      },
      "Condition": {
        "name": "Condition",
        "description": "An condition that is linked to comparable samples.",
        "anchor_point": {
          "target_class": "Condition",
          "identifier_slot": "accession",
          "root_slot": "conditions"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An condition that is linked to comparable samples.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "case_control_status": {
              "$ref": "#/$defs/CaseControlStatusEnum",
              "description": "Whether a condition corresponds to a treatment or a control."
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "disease_or_healthy": {
              "$ref": "#/$defs/DiseaseOrHealthyEnum",
              "description": "Whether a condition corresponds to a disease or a healthy state."
            },
            "mutant_or_wildtype": {
              "$ref": "#/$defs/MutantOrWildtypeEnum",
              "description": "Whether a condition corresponds to a mutant or a wildtype."
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "disease_or_healthy",
            "case_control_status",
            "mutant_or_wildtype",
            "study",
            "alias",
            "accession",
            "samples"
          ],
          "title": "Condition",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "CaseControlStatusEnum": {
              "description": "Enum to capture whether a condition corresponds to a case or a control condition.",
              "enum": [
                "NEITHER_CASE_OR_CONTROL_STATUS",
                "PROBABLE_CASE_STATUS",
                "PROBABLE_CONTROL_STATUS",
                "TRUE_CASE_STATUS",
                "TRUE_CONTROL_STATUS",
                "UNABLE_TO_ASSESS_CASE_OR_CONTROL_STATUS"
              ],
              "title": "CaseControlStatusEnum",
              "type": "string"
            },
            "DiseaseOrHealthyEnum": {
              "description": "Enum to capture whether a condition corresponds to a disease or a healthy state.",
              "enum": [
                "DISEASE",
                "HEALTHY",
                "NOT_APPLICABLE"
              ],
              "title": "DiseaseOrHealthyEnum",
              "type": "string"
            },
            "MutantOrWildtypeEnum": {
              "description": "Enum to capture whether a condition corresponds to a mutant or a wildtype.",
              "enum": [
                "MUTANT",
                "WILDTYPE",
                "NOT_APPLICABLE"
              ],
              "title": "MutantOrWildtypeEnum",
              "type": "string"
            }
          }
        }
      },
      "Study": {
        "name": "Study",
        "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
        "anchor_point": {
          "target_class": "Study",
          "identifier_slot": "accession",
          "root_slot": "studies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "affiliations": {
              "description": "The Institution(s) associated with an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Custom key/value pairs that further characterizes the Study. (e.g.: approaches - single-cell,_bulk_etc)",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "conditions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description (abstract) that describes the goals of this Study.",
              "type": "string"
            },
            "publications": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A comprehensive title for the study.",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/StudyTypeEnum",
              "description": "The type of Study. For example, 'Cancer Genomics', 'Epigenetics', 'Exome Sequencing'."
            }
          },
          "required": [
            "title",
            "description",
            "type",
            "affiliations",
            "alias",
            "accession",
            "conditions",
            "study_files",
            "publications"
          ],
          "title": "Study",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "StudyTypeEnum": {
              "description": "Enum to capture the type of a study.",
              "enum": [
                "CANCER_GENOMICS",
                "EPIGENETICS",
                "EXOME_SEQUENCING",
                "FORENSIC_GENETICS",
                "PALEO_GENOMICS",
                "GENE_REGULATION_STUDY",
                "METAGENOMICS",
                "OTHER",
                "POOLED_CLONE_SEQUENCING",
                "POPULATION_GENOMICS",
                "RNASEQ",
                "RESEQUENCING",
                "SYNTHETIC_GENOMICS",
                "TRANSCRIPTOME_ANALYSIS",
                "WHOLE_GENOME_SEQUENCING",
                "GWAS"
              ],
              "title": "StudyTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "LibraryPreparationProtocol": {
        "name": "LibraryPreparationProtocol",
        "description": "Information about the library_preparation of an sequencing experiment.",
        "anchor_point": {
          "target_class": "LibraryPreparationProtocol",
          "identifier_slot": "accession",
          "root_slot": "library_preparation_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the library_preparation of an sequencing experiment.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this library_preparation Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description about how a sequencing library was prepared (eg: Library construction method).",
              "type": "string"
            },
            "end_bias": {
              "$ref": "#/$defs/EndBiasEnum",
              "description": "The end of the cDNA molecule that is preferentially sequenced, e.g. 3/5 prime tag or end, or the full-length transcript."
            },
            "library_layout": {
              "$ref": "#/$defs/LibraryPreparationLibraryLayoutEnum",
              "description": "Describe whether the library was sequenced in single-end (forward or reverse) or paired-end mode"
            },
            "library_name": {
              "description": "A short name identifying the library to potential users. The same name may refer to multiple versions of the same continually updated library.",
              "type": "string"
            },
            "library_preparation": {
              "description": "The general method for sequencing library_preparation (e.g. KAPA PCR-free).",
              "type": "string"
            },
            "library_preparation_kit_manufacturer": {
              "description": "Manufacturer of library_preparation kit",
              "type": "string"
            },
            "library_preparation_kit_retail_name": {
              "$ref": "#/$defs/LibraryPreparationKitRetailNameEnum",
              "description": "A unique identifier for the kit used to construct a genomic library. This may include the vendor name, kit name and kit version (e.g. Agilent sure select Human Exome V8, Twist RefSeq Exome, etc.)"
            },
            "library_selection": {
              "$ref": "#/$defs/LibraryPreparationLibrarySelectionEnum",
              "description": "Whether any method was used to select for or against, enrich, or screen the material being sequenced. library_selection method (e.g. random, PCA, cDNA, etc )"
            },
            "library_type": {
              "$ref": "#/$defs/LibraryPreparationLibraryTypeEnum",
              "description": "Describe the level of omics analysis (eg: Metagenome, transcriptome, etc)"
            },
            "primer": {
              "$ref": "#/$defs/PrimerEnum",
              "description": "The type of primer used for reverse transcription, e.g. 'oligo-dT' or 'random' primer. This allows users to identify content of the cDNA library input e.g. enriched for mRNA."
            },
            "rnaseq_strandedness": {
              "$ref": "#/$defs/LibraryPreparationRNASeqStrandednessEnum",
              "description": "The strandedness of the library, whether reads come from both strands of the cDNA or only from the first (antisense) or the second (sense) strand."
            },
            "sequencing_experiments": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "target_regions": {
              "description": "Subset of genes or specific regions of the genome, which are most likely to be involved in the phenotype under study.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "description",
            "library_name",
            "library_layout",
            "library_type",
            "library_selection",
            "library_preparation",
            "alias",
            "accession",
            "sequencing_experiments"
          ],
          "title": "LibraryPreparationProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "EndBiasEnum": {
              "description": "Permitted values for end bias",
              "enum": [
                "3_PRIME_END",
                "5_PRIME_END",
                "FULL_LENGTH"
              ],
              "title": "EndBiasEnum",
              "type": "string"
            },
            "LibraryPreparationKitRetailNameEnum": {
              "description": "Permitted values for library preparation kit retail name",
              "enum": [
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V2",
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V3",
                "ACCEL_NGS_2_S_PLUS_DNA_LIBRARY_KIT",
                "ACCEL_NGS_METHYL_SEQ_DNA",
                "AGILENT_STRAND_SPECIFIC_RNA",
                "AGILENT_SURE_SELECT_CUSTOM_ENRICHMENT_KIT",
                "AGILENT_SURE_SELECT_V3",
                "AGILENT_SURE_SELECT_V4",
                "AGILENT_SURE_SELECT_V4_UT_RS",
                "AGILENT_SURE_SELECT_V5",
                "AGILENT_SURE_SELECT_V5_UT_RS",
                "AGILENT_SURE_SELECT_V6",
                "AGILENT_SURE_SELECT_V6_ONE",
                "AGILENT_SURE_SELECT_V6_UT_RS",
                "AGILENT_SURE_SELECT_V7",
                "AGILENT_SURE_SELECT_WGS",
                "AGILENT_SURE_SELECT_XT_HS_HUMAN_ALL_EXON_V7",
                "AGILENT_SURE_SELECT_XT_MOUSE_ALL_EXON",
                "AGILENT_XT_HS_SURE_SELECT_CLINICAL_RESEARCH_EXOME_V2",
                "AVENIO_CT_DNA_KIT",
                "IDT_X_GEN_EXOME_RESEARCH_PANEL",
                "ILLUMINA_DNA_PCR_FREE",
                "ILLUMINA_NEXTERA_DNA_FLEX",
                "ILLUMINA_NEXTERA_EXOME_ENRICHMENT_KIT",
                "ILLUMINA_STRANDED_M_RNA_PREP_LIGATION",
                "ILLUMINA_TRU_SEQ_CH_IP_SAMPLE_PREPARATION_KIT",
                "ILLUMINA_TRU_SEQ_CUSTOM_AMPLICON",
                "ILLUMINA_TRU_SEQ_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA_HT",
                "ILLUMINA_TRU_SEQ_NANO_DNA_LT",
                "ILLUMINA_TRU_SEQ_NANO_FFPE_DNA",
                "ILLUMINA_TRU_SEQ_PCR_FREE",
                "ILLUMINA_TRU_SEQ_PCR_FREE_DNA",
                "ILLUMINA_TRUSEQ_PCR_FREE_METHYL",
                "ILLUMINA_TRU_SEQ_RNA",
                "ILLUMINA_TRU_SEQ_SMALL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_LIBRARY_PREP_GLOBIN",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_RIBO_MINUS_GOLD",
                "ILLUMINA_VAHTS_TOTAL_RNA",
                "INFORM_ONCO_PANEL_HG19",
                "ION_AMPLI_SEQ_EXOME_KIT",
                "KAPA_HIFI_HOT_START_READYMIX",
                "KAPA_HYPER_PREP_KIT",
                "KAPA_HYPER_PLUS_KIT",
                "KAPA_M_RNA_HYPER_PREP_KIT",
                "MAGNETIC_METHYLATED_DNA_IMMUNOPRECIPITATION_DIAGNODE",
                "NEB_NEXT_CH_IP_SEQ_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_GLOBIN_R_RNA_DEPLETION_KIT_HUMAN_MOUSE_RAT_WITH_BEADS",
                "NEB_NEXT_POLY_A_M_RNA_MAGNETIC_ISOLATION_MODULE",
                "NEB_NEXT_RNA_ULTRA_II_STRANDED",
                "NEBNEXT_ULTRA_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_DNA",
                "NEB_NEXT_ULTRA_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_ULTRA_II_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_II_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEXTERA_XT_DNA",
                "OLIGO_D_T",
                "PICO_METHYL_SEQ",
                "SMART_SEQ_V4_ULTRA_LOW_INPUT_RNA_KIT",
                "SMAR_TER_STRANDED_TOTAL_RNA_SEQ_KIT",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_V4_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TSEQ2_TAG",
                "SUPER_SCRIPT_II_RT_BULK",
                "SURE_CELL_ATAC_SEQ_LIBRARY_PREP_KIT",
                "SURE_SELECT_EUROFINS_ENRICHMENT_CUSTOM_01",
                "TAKARA_CLONTECH_SMAR_TER_STRANDED_TOTAL_RNA",
                "TAKARA_SMAR_TER_PREP_X_DNA_LIBRARY_KIT_ACTIVE_MOTIF_CUSTOM_INDICES_01",
                "TEMPLATE_SWITCHING_RT_ENZYME_MIX_BULK",
                "TWIST_HUMAN_CORE_EXOME_PLUS_KIT",
                "ULTRALOW_METHYL_SEQ_WITH_TRUE_METHYL_OX_BS_MODULE"
              ],
              "title": "LibraryPreparationKitRetailNameEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryLayoutEnum": {
              "description": "Single-end vs paired-end library",
              "enum": [
                "SE",
                "PE"
              ],
              "title": "LibraryPreparationLibraryLayoutEnum",
              "type": "string"
            },
            "LibraryPreparationLibrarySelectionEnum": {
              "description": "Permitted vocabulary for library selections",
              "enum": [
                "5_METHYLCYTIDINE_ANTIBODY_METHOD",
                "CAGE_METHOD",
                "C_DNA_METHOD",
                "CF_H_METHOD",
                "CF_M_METHOD",
                "CF_S_METHOD",
                "CF_T_METHOD",
                "CH_IP_SEQ_METHOD",
                "D_NASE_METHOD",
                "HMPR_METHOD",
                "HYBRID_SELECTION_METHOD",
                "INVERSE_R_RNA",
                "MBD2_PROTEIN_METHYL_CP_G_BINDING_DOMAIN_METHOD",
                "MDA",
                "MF_METHOD",
                "M_NASE_METHOD",
                "MSLL_METHOD",
                "OLIGO_D_T",
                "PADLOCK_PROBES_CAPTURE_METHOD",
                "PCR_METHOD",
                "POLY_A",
                "RACE_METHOD",
                "RANDOM_PCR_METHOD",
                "RANDOM_METHOD",
                "RT_PCR_METHOD",
                "REDUCED_REPRESENTATION_METHOD",
                "REPEAT_FRACTIONATION",
                "RESTRICTION_DIGEST_METHOD",
                "SIZE_FRACTIONATION_METHOD",
                "UNSPECIFIED",
                "OTHER"
              ],
              "title": "LibraryPreparationLibrarySelectionEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryTypeEnum": {
              "description": "The type of the library",
              "enum": [
                "WGS",
                "WXS",
                "WCS",
                "TOTAL_RNA",
                "M_RNA",
                "MI_RNA",
                "NC_RNA",
                "ATAC",
                "METHYLATION",
                "CHROMOSOME_CONFORMATION_CAPTURE"
              ],
              "title": "LibraryPreparationLibraryTypeEnum",
              "type": "string"
            },
            "LibraryPreparationRNASeqStrandednessEnum": {
              "description": "Permitted values for library preparation RNASeq strandedness",
              "enum": [
                "SENSE",
                "ANTISENSE",
                "BOTH"
              ],
              "title": "LibraryPreparationRNASeqStrandednessEnum",
              "type": "string"
            },
            "PrimerEnum": {
              "description": "Permitted values for primer",
              "enum": [
                "OLIGO_D_T",
                "RANDOM",
                "GENE_SPECIFIC",
                "OTHER"
              ],
              "title": "PrimerEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcess": {
        "name": "SequencingProcess",
        "description": "A sequencing process linking a sample to sequencing output.",
        "anchor_point": {
          "target_class": "SequencingProcess",
          "identifier_slot": "accession",
          "root_slot": "sequencing_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sequencing process linking a sample to sequencing output.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "index_sequence": {
              "description": "A unique nucleotide sequence that is added to a sample during library_preparation to serve as a unique identifier for the sample.",
              "type": "string"
            },
            "lane_number": {
              "description": "The numerical identifier for the lane or machine unit where a sample was located during nucleotide sequencing.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "sequencing_experiment": {
              "description": "The sequencing experiment associated with an entity.",
              "type": "string"
            },
            "sequencing_lane_id": {
              "description": "Identifier of the sequencing lane. Used for batch correction.",
              "type": "string"
            },
            "sequencing_machine_id": {
              "description": "Identifier of the sequencing machine. Used for batch correction.",
              "type": "string"
            },
            "sequencing_process_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_run_id": {
              "description": "Identifier of the sequencing run. Used for batch correction.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "sequencing_experiment",
            "sample",
            "alias",
            "accession",
            "sequencing_process_files"
          ],
          "title": "SequencingProcess",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Individual": {
        "name": "Individual",
        "description": "An Individual is a Person who is participating in a Study.",
        "anchor_point": {
          "target_class": "Individual",
          "identifier_slot": "accession",
          "root_slot": "individuals"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Individual is a Person who is participating in a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "ancestries": {
              "description": "A person's descent or lineage, from a person or from a population.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "biospecimens": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "geographical_region": {
              "description": "The geographical region where the Individual is located. Any demarcated area of the Earth; may be determined by both natural and human boundaries.",
              "type": "string"
            },
            "karyotype": {
              "$ref": "#/$defs/KaryotypeEnum",
              "description": "The karyotype of an individual if defined."
            },
            "phenotypic_features": {
              "description": "The Phenotypic Feature entity that is associated with this Biospecimen at the time of retrieval from the organism. Typically, a concept from Human Phenotype Ontology. For example, 'HP:0100244' indicates that the Individual - from_which_the_Biospecimen was extracted from - exhibits_'Fibrosarcoma'_as_one_of_its_phenotype.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sex": {
              "$ref": "#/$defs/IndividualSexEnum",
              "description": "The assemblage of physical properties or qualities by which male is distinguished from female; the physical difference between male and female; the distinguishing peculiarity of male or female."
            }
          },
          "required": [
            "sex",
            "alias",
            "accession",
            "biospecimens"
          ],
          "title": "Individual",
          "type": "object",
          "$defs": {
            "IndividualSexEnum": {
              "description": "The sex of an Individual as as defined in a specific medical and clinical context.",
              "enum": [
                "FEMALE_SEX_FOR_CLINICAL_USE",
                "IMAGING_SEX",
                "MALE_SEX_FOR_CLINICAL_USE",
                "SPECIFIED_SEX_FOR_CLINICAL_USE",
                "UNKNOWN_SEX_FOR_CLINICAL_USE"
              ],
              "title": "IndividualSexEnum",
              "type": "string"
            },
            "KaryotypeEnum": {
              "description": "Permitted values for karyotype",
              "enum": [
                "46_XY",
                "46_XX",
                "OTHER"
              ],
              "title": "KaryotypeEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcessFile": {
        "name": "SequencingProcessFile",
        "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
        "anchor_point": {
          "target_class": "SequencingProcessFile",
          "identifier_slot": "accession",
          "root_slot": "sequencing_process_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sequencing_process": {
              "description": "The SequencingProcess associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sequencing_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SequencingProcessFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProtocol": {
        "name": "SequencingProtocol",
        "description": "Information about the sequencing of a sample.",
        "anchor_point": {
          "target_class": "SequencingProtocol",
          "identifier_slot": "accession",
          "root_slot": "sequencing_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the sequencing of a sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this Sequencing Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "cell_barcode_offset": {
              "description": "The offset in sequence of the cell identifying barcode. (Eg. '0').",
              "type": "string"
            },
            "cell_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the cell barcode (eg: index1/index2/read1/read2)."
            },
            "cell_barcode_size": {
              "description": "The size of the cell identifying barcode (E.g. '16').",
              "type": "string"
            },
            "description": {
              "description": "Description about the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "flow_cell_id": {
              "description": "Flow Cell ID (eg: Experiment ID_Cell 1_Lane_1). The barcode assigned to a flow cell used in nucleotide sequencing.",
              "type": "string"
            },
            "flow_cell_type": {
              "$ref": "#/$defs/FlowCellTypeEnum",
              "description": "Type of flow cell used (e.g. S4, S2 for NovaSeq; PromethION, Flongle for Nanopore). Aparatus in the fluidic subsystem where the sheath and sample meet. Can be one of several types; jet-in-air, quartz cuvette, or a hybrid of the two. The sample flows through the center of a fluid column of sheath fluid in the flow cell."
            },
            "instrument_model": {
              "$ref": "#/$defs/InstrumentModelEnum",
              "description": "The name and model of the technology platform used to perform sequencing."
            },
            "sample_barcode_read": {
              "$ref": "#/$defs/SampleBarcodeReadEnum",
              "description": "The type of read that contains the sample barcode (eg: index1/index2/read1/read2)."
            },
            "sequencing_center": {
              "description": "Center where sample was sequenced.",
              "type": "string"
            },
            "sequencing_experiments": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_read_length": {
              "description": "Length of sequencing reads (eg: Long or short or actual number of the read length etc). The number of nucleotides successfully ordered from each side of a nucleic acid fragment obtained after the completion of a sequencing process",
              "type": "string"
            },
            "target_coverage": {
              "description": "Mean coverage for whole genome sequencing, or mean target coverage for whole exome and targeted sequencing. The number of times a particular locus (site, nucleotide, amplicon, region) was sequenced.",
              "type": "string"
            },
            "type": {
              "description": "Type of the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "umi_barcode_offset": {
              "description": "The offset in sequence of the UMI identifying barcode. (E.g. '16').",
              "type": "string"
            },
            "umi_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the UMI barcode (Eg: index1/index2/read1/read2)."
            },
            "umi_barcode_size": {
              "description": "The size of the UMI identifying barcode (Eg. '10').",
              "type": "string"
            }
          },
          "required": [
            "description",
            "instrument_model",
            "alias",
            "accession",
            "sequencing_experiments"
          ],
          "title": "SequencingProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "FlowCellTypeEnum": {
              "description": "Permitted values for flow cell type",
              "enum": [
                "ILLUMINA_NOVA_SEQ_S2",
                "ILLUMINA_NOVA_SEQ_S4",
                "PROMETH_ION",
                "FLONGLE",
                "MIN_ION",
                "GRID_ION",
                "OTHER"
              ],
              "title": "FlowCellTypeEnum",
              "type": "string"
            },
            "IndexReadEnum": {
              "description": "Permitted Values to indicate the location of a sequence component in a read or index",
              "enum": [
                "INDEX1",
                "INDEX2",
                "READ1",
                "READ2"
              ],
              "title": "IndexReadEnum",
              "type": "string"
            },
            "InstrumentModelEnum": {
              "description": "Permitted values for instrument model",
              "enum": [
                "ILLUMINA_HI_SCAN",
                "ILLUMINA_HI_SEQ_1000",
                "ILLUMINA_HI_SEQ_1500",
                "ILLUMINA_HI_SEQ_2000",
                "ILLUMINA_HI_SEQ_2500",
                "ILLUMINA_HI_SEQ_3000",
                "ILLUMINA_HI_SEQ_4000",
                "ILLUMINA_HI_SEQ_X_FIVE",
                "ILLUMINA_HI_SEQ_X_TEN",
                "ILLUMINA_HI_SEQ_X",
                "ILLUMINA_I_SCAN",
                "ILLUMINA_I_SEQ_100",
                "ILLUMINA_MINI_SEQ",
                "ILLUMINA_MI_SEQ",
                "ILLUMINA_MI_SEQ_DX",
                "ILLUMINA_MI_SEQ_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_500",
                "ILLUMINA_NEXT_SEQ_550",
                "ILLUMINA_NEXT_SEQ_550_DX",
                "ILLUMINA_NEXT_SEQ_550_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_1000",
                "ILLUMINA_NEXT_SEQ_2000",
                "ILLUMINA_NOVA_SEQ_6000",
                "ILLUMINA_GENOME_ANALYZER",
                "ILLUMINA_GENOME_ANALYZER_II",
                "ILLUMINA_GENOME_ANALYZER_IIX",
                "ILLUMINA_HI_SCAN_SQ",
                "PAC_BIO_REVIO",
                "PAC_BIO_ONSO",
                "PAC_BIO_SEQUEL_IIE",
                "PAC_BIO_SEQUEL_II",
                "PAC_BIO_SEQUEL",
                "PAC_BIO_RS",
                "PAC_BIO_RS_II",
                "ONT_MIN_ION",
                "ONT_GRID_ION",
                "ONT_PROMETH_ION",
                "DNBSEQ_G50",
                "DNBSEQ_T7",
                "DNBSEQ_G400",
                "DNBSEQ_G400_FAST",
                "ULTIMA_UG_100",
                "OTHER"
              ],
              "title": "InstrumentModelEnum",
              "type": "string"
            },
            "SampleBarcodeReadEnum": {
              "description": "Permitted values for sample barcode read",
              "enum": [
                "INDEX1",
                "INDEX1_AND_INDEX2",
                "OTHER"
              ],
              "title": "SampleBarcodeReadEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcessOutputFile": {
        "name": "AnalysisProcessOutputFile",
        "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
        "anchor_point": {
          "target_class": "AnalysisProcessOutputFile",
          "identifier_slot": "accession",
          "root_slot": "analysis_process_output_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process": {
              "description": "The AnalysisProcess associated with an entity.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "analysis_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "AnalysisProcessOutputFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SampleFile": {
        "name": "SampleFile",
        "description": "A SampleFile is a File that is associated with a Sample.",
        "anchor_point": {
          "target_class": "SampleFile",
          "identifier_slot": "accession",
          "root_slot": "sample_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SampleFile is a File that is associated with a Sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sample",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SampleFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "StudyFile": {
        "name": "StudyFile",
        "description": "A StudyFile is a File that is associated with a Study.",
        "anchor_point": {
          "target_class": "StudyFile",
          "identifier_slot": "accession",
          "root_slot": "study_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A StudyFile is a File that is associated with a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            }
          },
          "required": [
            "study",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "StudyFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "Publication": {
        "name": "Publication",
        "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
        "anchor_point": {
          "target_class": "Publication",
          "identifier_slot": "accession",
          "root_slot": "publications"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
          "properties": {
            "abstract": {
              "description": "The study abstract that describes the goals. Can also hold abstract from a publication related to this study.",
              "type": "string"
            },
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "author": {
              "description": "The individual who is responsible for the content of a document version.",
              "type": "string"
            },
            "doi": {
              "description": "DOI identifier of the Publication.",
              "type": "string"
            },
            "journal": {
              "description": "Name of the journal.",
              "type": "string"
            },
            "study": {
              "description": "The Study entity associated with this Publication.",
              "type": "string"
            },
            "title": {
              "description": "The title for the Publication.",
              "type": "string"
            },
            "xref": {
              "description": "One or more cross-references for this Publication.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "year": {
              "description": "Year in which the paper was published.",
              "type": "integer"
            }
          },
          "required": [
            "doi",
            "study",
            "alias",
            "accession"
          ],
          "title": "Publication",
          "type": "object",
          "$defs": {}
        }
      }
    }
  },
  {
    "name": "resolved_public",
    "description": "resolved_public",
    "resource_classes": {
      "DataAccessCommittee": {
        "name": "DataAccessCommittee",
        "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
        "anchor_point": {
          "target_class": "DataAccessCommittee",
          "identifier_slot": "accession",
          "root_slot": "data_access_committees"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "email": {
              "description": "Email of a person.",
              "type": "string"
            },
            "institute": {
              "description": "The institute a person is affiliated with.",
              "type": "string"
            }
          },
          "required": [
            "email",
            "institute",
            "alias",
            "accession"
          ],
          "title": "DataAccessCommittee",
          "type": "object",
          "$defs": {}
        }
      },
      "DataAccessPolicy": {
        "name": "DataAccessPolicy",
        "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
        "anchor_point": {
          "target_class": "DataAccessPolicy",
          "identifier_slot": "accession",
          "root_slot": "data_access_policies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "data_access_committee": {
              "description": "The Data Access Committee linked to this policy.",
              "type": "string"
            },
            "data_use_modifiers": {
              "description": "Modifier for Data use permission associated with a policy. Should be descendants of 'DUO:0000017 data use modifier'",
              "items": {
                "$ref": "#/$defs/DataUseModifierEnum"
              },
              "type": "array"
            },
            "data_use_permission": {
              "$ref": "#/$defs/DataUsePermissionEnum",
              "description": "Data use permission associated with a policy. Typically one or more terms from DUO and should be descendants of 'DUO:0000001 data use permission'."
            },
            "description": {
              "description": "A short description for the Data Access Policy.",
              "type": "string"
            },
            "name": {
              "description": "A name for the Data Access Policy.",
              "type": "string"
            },
            "policy_text": {
              "description": "The terms of data use and policy verbiage should be captured here.",
              "type": "string"
            },
            "policy_url": {
              "description": "URL for the policy, if available. This is useful if the terms of the policy is made available online at a resolvable URL.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "description",
            "policy_text",
            "data_access_committee",
            "data_use_permission",
            "alias",
            "accession"
          ],
          "title": "DataAccessPolicy",
          "type": "object",
          "$defs": {
            "DataUseModifierEnum": {
              "description": "Permitted values for data use modifier",
              "enum": [
                "clinical care use",
                "return to database or resource",
                "institution specific restriction",
                "project specific restriction",
                "user specific restriction",
                "time limit on use",
                "publication moratorium",
                "geographical restriction",
                "ethics approval required",
                "collaboration required",
                "publication required",
                "not for profit, non commercial use only",
                "non-commercial use only",
                "not for profit organisation use only",
                "genetic studies only",
                "no general methods research",
                "research specific restrictions",
                "population origins or ancestry research prohibited"
              ],
              "title": "DataUseModifierEnum",
              "type": "string"
            },
            "DataUsePermissionEnum": {
              "description": "Permitted values for data use permission",
              "enum": [
                "general research use",
                "health or medical or biomedical research",
                "disease specific research",
                "no restriction",
                "population origins or ancestry research only"
              ],
              "title": "DataUsePermissionEnum",
              "type": "string"
            }
          }
        }
      },
      "Biospecimen": {
        "name": "Biospecimen",
        "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
        "anchor_point": {
          "target_class": "Biospecimen",
          "identifier_slot": "accession",
          "root_slot": "biospecimens"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "age_at_sampling": {
              "$ref": "#/$defs/AgeRangeEnum",
              "description": "Age of an individual."
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "individual": {
              "description": "The Individual entity from which this Biospecimen was derived.",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "tissue": {
              "type": "string"
            },
            "type": {
              "description": "The type of Biospecimen.",
              "type": "string"
            },
            "vital_status_at_sampling": {
              "$ref": "#/$defs/VitalStatusEnum",
              "description": "Vital Status of an Individual at the point of sampling (eg:'Alive', 'Deceased')."
            }
          },
          "required": [
            "individual",
            "age_at_sampling",
            "tissue",
            "alias",
            "accession",
            "samples"
          ],
          "title": "Biospecimen",
          "type": "object",
          "$defs": {
            "AgeRangeEnum": {
              "description": "Enum to capture the age range that an Indiviudal belongs to.",
              "enum": [
                "0_TO_5",
                "6_TO_10",
                "11_TO_15",
                "16_TO_20",
                "21_TO_25",
                "26_TO_30",
                "31_TO_35",
                "36_TO_40",
                "41_TO_45",
                "46_TO_50",
                "51_TO_55",
                "56_TO_60",
                "61_TO_65",
                "66_TO_70",
                "71_TO_75",
                "76_TO_80",
                "81_OR_OLDER",
                "UNKNOWN"
              ],
              "title": "AgeRangeEnum",
              "type": "string"
            },
            "VitalStatusEnum": {
              "description": "Enum to capture the vital status of an individual.",
              "enum": [
                "ALIVE",
                "DECEASED",
                "UNKNOWN"
              ],
              "title": "VitalStatusEnum",
              "type": "string"
            }
          }
        }
      },
      "Sample": {
        "name": "Sample",
        "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
        "anchor_point": {
          "target_class": "Sample",
          "identifier_slot": "accession",
          "root_slot": "samples"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "biospecimen": {
              "description": "The Biospecimen from which this Sample was prepared from.",
              "type": "string"
            },
            "condition": {
              "description": "The condition associated with an entity.",
              "type": "string"
            },
            "description": {
              "description": "Short textual description of the sample (How the sample was collected, sample source, Protocol followed for processing the sample etc).",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "Name of the sample (eg:GHGAS_Blood_Sample1 or GHGAS_PBMC_RNAseq_S1).",
              "type": "string"
            },
            "sample_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/SampleTypeEnum",
              "description": "The type of sample."
            },
            "xref": {
              "description": "One or more cross-references for this Sample. For example, this Sample may have an EBI BioSamples accession or an EGA Sample accession.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "description",
            "condition",
            "alias",
            "accession",
            "sample_files",
            "sequencing_processes"
          ],
          "title": "Sample",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "SampleTypeEnum": {
              "description": "The type of a sample",
              "enum": [
                "CF_DNA",
                "DEPLETED_RNA",
                "DS_DNA_CH_IP",
                "FFPE_DNA",
                "FFPE_TOTAL_RNA",
                "GENOMIC_DNA",
                "PCR_PRODUCTS",
                "POLY_A_RNA",
                "SINGLE_CELL_DNA",
                "SINGLE_CELL_RNA",
                "SMALL_RNA",
                "TOTAL_RNA"
              ],
              "title": "SampleTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcess": {
        "name": "AnalysisProcess",
        "description": null,
        "anchor_point": {
          "target_class": "AnalysisProcess",
          "identifier_slot": "accession",
          "root_slot": "analysis_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis": {
              "description": "The Analysis the AnalysisProcess was part of",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sample_input_files": {
              "description": "The SampleFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_input_files": {
              "description": "The SequencingProcessFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_input_files": {
              "description": "The StudyFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "analysis",
            "alias",
            "accession",
            "analysis_process_output_files"
          ],
          "title": "AnalysisProcess",
          "type": "object",
          "$defs": {}
        }
      },
      "SequencingExperiment": {
        "name": "SequencingExperiment",
        "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
        "anchor_point": {
          "target_class": "SequencingExperiment",
          "identifier_slot": "accession",
          "root_slot": "sequencing_experiments"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description of the Experiment.",
              "type": "string"
            },
            "library_preparation_protocol": {
              "description": "The library_preparation Protocol associated with an entity.",
              "type": "string"
            },
            "sequencing_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_protocol": {
              "description": "The sequencing protocol associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "Name for the experiment (eg: GHGAE_PBMC_RNAseq).",
              "type": "string"
            },
            "type": {
              "description": "The type of sequencing experiment.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "sequencing_protocol",
            "library_preparation_protocol",
            "alias",
            "accession",
            "sequencing_processes"
          ],
          "title": "SequencingExperiment",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Analysis": {
        "name": "Analysis",
        "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
        "anchor_point": {
          "target_class": "Analysis",
          "identifier_slot": "accession",
          "root_slot": "analyses"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": {
              "description": "Describing how an Analysis was carried out. (e.g.: computational tools, settings, etc.).",
              "type": "string"
            },
            "reference_chromosome": {
              "description": "The reference chromosome used for this Analysis.",
              "type": "string"
            },
            "reference_genome": {
              "description": "A published genetic sequence that is used as a reference sequence against which other sequences are compared. Reference genome(s) or annotation(s) used for prior analyses (eg: GRCh38.p13).",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            },
            "type": {
              "description": "The type of the Analysis. Either Reference Alignment (BAM) or Sequence Variation (VCF)",
              "type": "string"
            }
          },
          "required": [
            "reference_genome",
            "reference_chromosome",
            "alias",
            "accession",
            "analysis_processes"
          ],
          "title": "Analysis",
          "type": "object",
          "$defs": {}
        }
      },
      "Dataset": {
        "name": "Dataset",
        "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
        "anchor_point": {
          "target_class": "Dataset",
          "identifier_slot": "accession",
          "root_slot": "datasets"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "data_access_policy": {
              "description": "The Data Access Policy that applies to this Dataset.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "files": {
              "description": "All files associated with the dataset.",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              },
              "type": "array"
            },
            "sample_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studies": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A title for the submitted Dataset.",
              "type": "string"
            },
            "types": {
              "description": "The type of a dataset.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "title",
            "description",
            "types",
            "data_access_policy",
            "alias",
            "accession",
            "analysis_process_output_files",
            "sequencing_process_files",
            "study_files",
            "studies",
            "sample_files",
            "samples",
            "files"
          ],
          "title": "Dataset",
          "type": "object",
          "$defs": {}
        }
      },
      "Trio": {
        "name": "Trio",
        "description": "A trio is defined by three individuals representing an individual and their parents.",
        "anchor_point": {
          "target_class": "Trio",
          "identifier_slot": "accession",
          "root_slot": "trios"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A trio is defined by three individuals representing an individual and their parents.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "child": {
              "description": "The child of two individuals.",
              "type": "string"
            },
            "father": {
              "description": "The father of an individual.",
              "type": "string"
            },
            "mother": {
              "description": "The mother of an individual.",
              "type": "string"
            }
          },
          "required": [
            "mother",
            "father",
            "child",
            "alias",
            "accession"
          ],
          "title": "Trio",
          "type": "object",
          "$defs": {}
        }
      },
      "Condition": {
        "name": "Condition",
        "description": "An condition that is linked to comparable samples.",
        "anchor_point": {
          "target_class": "Condition",
          "identifier_slot": "accession",
          "root_slot": "conditions"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An condition that is linked to comparable samples.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "case_control_status": {
              "$ref": "#/$defs/CaseControlStatusEnum",
              "description": "Whether a condition corresponds to a treatment or a control."
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "disease_or_healthy": {
              "$ref": "#/$defs/DiseaseOrHealthyEnum",
              "description": "Whether a condition corresponds to a disease or a healthy state."
            },
            "mutant_or_wildtype": {
              "$ref": "#/$defs/MutantOrWildtypeEnum",
              "description": "Whether a condition corresponds to a mutant or a wildtype."
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "disease_or_healthy",
            "case_control_status",
            "mutant_or_wildtype",
            "study",
            "alias",
            "accession",
            "samples"
          ],
          "title": "Condition",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "CaseControlStatusEnum": {
              "description": "Enum to capture whether a condition corresponds to a case or a control condition.",
              "enum": [
                "NEITHER_CASE_OR_CONTROL_STATUS",
                "PROBABLE_CASE_STATUS",
                "PROBABLE_CONTROL_STATUS",
                "TRUE_CASE_STATUS",
                "TRUE_CONTROL_STATUS",
                "UNABLE_TO_ASSESS_CASE_OR_CONTROL_STATUS"
              ],
              "title": "CaseControlStatusEnum",
              "type": "string"
            },
            "DiseaseOrHealthyEnum": {
              "description": "Enum to capture whether a condition corresponds to a disease or a healthy state.",
              "enum": [
                "DISEASE",
                "HEALTHY",
                "NOT_APPLICABLE"
              ],
              "title": "DiseaseOrHealthyEnum",
              "type": "string"
            },
            "MutantOrWildtypeEnum": {
              "description": "Enum to capture whether a condition corresponds to a mutant or a wildtype.",
              "enum": [
                "MUTANT",
                "WILDTYPE",
                "NOT_APPLICABLE"
              ],
              "title": "MutantOrWildtypeEnum",
              "type": "string"
            }
          }
        }
      },
      "Study": {
        "name": "Study",
        "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
        "anchor_point": {
          "target_class": "Study",
          "identifier_slot": "accession",
          "root_slot": "studies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "affiliations": {
              "description": "The Institution(s) associated with an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Custom key/value pairs that further characterizes the Study. (e.g.: approaches - single-cell,_bulk_etc)",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "conditions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description (abstract) that describes the goals of this Study.",
              "type": "string"
            },
            "publications": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A comprehensive title for the study.",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/StudyTypeEnum",
              "description": "The type of Study. For example, 'Cancer Genomics', 'Epigenetics', 'Exome Sequencing'."
            }
          },
          "required": [
            "title",
            "description",
            "type",
            "affiliations",
            "alias",
            "accession",
            "conditions",
            "study_files",
            "publications"
          ],
          "title": "Study",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "StudyTypeEnum": {
              "description": "Enum to capture the type of a study.",
              "enum": [
                "CANCER_GENOMICS",
                "EPIGENETICS",
                "EXOME_SEQUENCING",
                "FORENSIC_GENETICS",
                "PALEO_GENOMICS",
                "GENE_REGULATION_STUDY",
                "METAGENOMICS",
                "OTHER",
                "POOLED_CLONE_SEQUENCING",
                "POPULATION_GENOMICS",
                "RNASEQ",
                "RESEQUENCING",
                "SYNTHETIC_GENOMICS",
                "TRANSCRIPTOME_ANALYSIS",
                "WHOLE_GENOME_SEQUENCING",
                "GWAS"
              ],
              "title": "StudyTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "LibraryPreparationProtocol": {
        "name": "LibraryPreparationProtocol",
        "description": "Information about the library_preparation of an sequencing experiment.",
        "anchor_point": {
          "target_class": "LibraryPreparationProtocol",
          "identifier_slot": "accession",
          "root_slot": "library_preparation_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the library_preparation of an sequencing experiment.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this library_preparation Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description about how a sequencing library was prepared (eg: Library construction method).",
              "type": "string"
            },
            "end_bias": {
              "$ref": "#/$defs/EndBiasEnum",
              "description": "The end of the cDNA molecule that is preferentially sequenced, e.g. 3/5 prime tag or end, or the full-length transcript."
            },
            "library_layout": {
              "$ref": "#/$defs/LibraryPreparationLibraryLayoutEnum",
              "description": "Describe whether the library was sequenced in single-end (forward or reverse) or paired-end mode"
            },
            "library_name": {
              "description": "A short name identifying the library to potential users. The same name may refer to multiple versions of the same continually updated library.",
              "type": "string"
            },
            "library_preparation": {
              "description": "The general method for sequencing library_preparation (e.g. KAPA PCR-free).",
              "type": "string"
            },
            "library_preparation_kit_manufacturer": {
              "description": "Manufacturer of library_preparation kit",
              "type": "string"
            },
            "library_preparation_kit_retail_name": {
              "$ref": "#/$defs/LibraryPreparationKitRetailNameEnum",
              "description": "A unique identifier for the kit used to construct a genomic library. This may include the vendor name, kit name and kit version (e.g. Agilent sure select Human Exome V8, Twist RefSeq Exome, etc.)"
            },
            "library_selection": {
              "$ref": "#/$defs/LibraryPreparationLibrarySelectionEnum",
              "description": "Whether any method was used to select for or against, enrich, or screen the material being sequenced. library_selection method (e.g. random, PCA, cDNA, etc )"
            },
            "library_type": {
              "$ref": "#/$defs/LibraryPreparationLibraryTypeEnum",
              "description": "Describe the level of omics analysis (eg: Metagenome, transcriptome, etc)"
            },
            "primer": {
              "$ref": "#/$defs/PrimerEnum",
              "description": "The type of primer used for reverse transcription, e.g. 'oligo-dT' or 'random' primer. This allows users to identify content of the cDNA library input e.g. enriched for mRNA."
            },
            "rnaseq_strandedness": {
              "$ref": "#/$defs/LibraryPreparationRNASeqStrandednessEnum",
              "description": "The strandedness of the library, whether reads come from both strands of the cDNA or only from the first (antisense) or the second (sense) strand."
            },
            "sequencing_experiments": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "target_regions": {
              "description": "Subset of genes or specific regions of the genome, which are most likely to be involved in the phenotype under study.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "description",
            "library_name",
            "library_layout",
            "library_type",
            "library_selection",
            "library_preparation",
            "alias",
            "accession",
            "sequencing_experiments"
          ],
          "title": "LibraryPreparationProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "EndBiasEnum": {
              "description": "Permitted values for end bias",
              "enum": [
                "3_PRIME_END",
                "5_PRIME_END",
                "FULL_LENGTH"
              ],
              "title": "EndBiasEnum",
              "type": "string"
            },
            "LibraryPreparationKitRetailNameEnum": {
              "description": "Permitted values for library preparation kit retail name",
              "enum": [
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V2",
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V3",
                "ACCEL_NGS_2_S_PLUS_DNA_LIBRARY_KIT",
                "ACCEL_NGS_METHYL_SEQ_DNA",
                "AGILENT_STRAND_SPECIFIC_RNA",
                "AGILENT_SURE_SELECT_CUSTOM_ENRICHMENT_KIT",
                "AGILENT_SURE_SELECT_V3",
                "AGILENT_SURE_SELECT_V4",
                "AGILENT_SURE_SELECT_V4_UT_RS",
                "AGILENT_SURE_SELECT_V5",
                "AGILENT_SURE_SELECT_V5_UT_RS",
                "AGILENT_SURE_SELECT_V6",
                "AGILENT_SURE_SELECT_V6_ONE",
                "AGILENT_SURE_SELECT_V6_UT_RS",
                "AGILENT_SURE_SELECT_V7",
                "AGILENT_SURE_SELECT_WGS",
                "AGILENT_SURE_SELECT_XT_HS_HUMAN_ALL_EXON_V7",
                "AGILENT_SURE_SELECT_XT_MOUSE_ALL_EXON",
                "AGILENT_XT_HS_SURE_SELECT_CLINICAL_RESEARCH_EXOME_V2",
                "AVENIO_CT_DNA_KIT",
                "IDT_X_GEN_EXOME_RESEARCH_PANEL",
                "ILLUMINA_DNA_PCR_FREE",
                "ILLUMINA_NEXTERA_DNA_FLEX",
                "ILLUMINA_NEXTERA_EXOME_ENRICHMENT_KIT",
                "ILLUMINA_STRANDED_M_RNA_PREP_LIGATION",
                "ILLUMINA_TRU_SEQ_CH_IP_SAMPLE_PREPARATION_KIT",
                "ILLUMINA_TRU_SEQ_CUSTOM_AMPLICON",
                "ILLUMINA_TRU_SEQ_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA_HT",
                "ILLUMINA_TRU_SEQ_NANO_DNA_LT",
                "ILLUMINA_TRU_SEQ_NANO_FFPE_DNA",
                "ILLUMINA_TRU_SEQ_PCR_FREE",
                "ILLUMINA_TRU_SEQ_PCR_FREE_DNA",
                "ILLUMINA_TRUSEQ_PCR_FREE_METHYL",
                "ILLUMINA_TRU_SEQ_RNA",
                "ILLUMINA_TRU_SEQ_SMALL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_LIBRARY_PREP_GLOBIN",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_RIBO_MINUS_GOLD",
                "ILLUMINA_VAHTS_TOTAL_RNA",
                "INFORM_ONCO_PANEL_HG19",
                "ION_AMPLI_SEQ_EXOME_KIT",
                "KAPA_HIFI_HOT_START_READYMIX",
                "KAPA_HYPER_PREP_KIT",
                "KAPA_HYPER_PLUS_KIT",
                "KAPA_M_RNA_HYPER_PREP_KIT",
                "MAGNETIC_METHYLATED_DNA_IMMUNOPRECIPITATION_DIAGNODE",
                "NEB_NEXT_CH_IP_SEQ_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_GLOBIN_R_RNA_DEPLETION_KIT_HUMAN_MOUSE_RAT_WITH_BEADS",
                "NEB_NEXT_POLY_A_M_RNA_MAGNETIC_ISOLATION_MODULE",
                "NEB_NEXT_RNA_ULTRA_II_STRANDED",
                "NEBNEXT_ULTRA_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_DNA",
                "NEB_NEXT_ULTRA_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_ULTRA_II_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_II_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEXTERA_XT_DNA",
                "OLIGO_D_T",
                "PICO_METHYL_SEQ",
                "SMART_SEQ_V4_ULTRA_LOW_INPUT_RNA_KIT",
                "SMAR_TER_STRANDED_TOTAL_RNA_SEQ_KIT",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_V4_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TSEQ2_TAG",
                "SUPER_SCRIPT_II_RT_BULK",
                "SURE_CELL_ATAC_SEQ_LIBRARY_PREP_KIT",
                "SURE_SELECT_EUROFINS_ENRICHMENT_CUSTOM_01",
                "TAKARA_CLONTECH_SMAR_TER_STRANDED_TOTAL_RNA",
                "TAKARA_SMAR_TER_PREP_X_DNA_LIBRARY_KIT_ACTIVE_MOTIF_CUSTOM_INDICES_01",
                "TEMPLATE_SWITCHING_RT_ENZYME_MIX_BULK",
                "TWIST_HUMAN_CORE_EXOME_PLUS_KIT",
                "ULTRALOW_METHYL_SEQ_WITH_TRUE_METHYL_OX_BS_MODULE"
              ],
              "title": "LibraryPreparationKitRetailNameEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryLayoutEnum": {
              "description": "Single-end vs paired-end library",
              "enum": [
                "SE",
                "PE"
              ],
              "title": "LibraryPreparationLibraryLayoutEnum",
              "type": "string"
            },
            "LibraryPreparationLibrarySelectionEnum": {
              "description": "Permitted vocabulary for library selections",
              "enum": [
                "5_METHYLCYTIDINE_ANTIBODY_METHOD",
                "CAGE_METHOD",
                "C_DNA_METHOD",
                "CF_H_METHOD",
                "CF_M_METHOD",
                "CF_S_METHOD",
                "CF_T_METHOD",
                "CH_IP_SEQ_METHOD",
                "D_NASE_METHOD",
                "HMPR_METHOD",
                "HYBRID_SELECTION_METHOD",
                "INVERSE_R_RNA",
                "MBD2_PROTEIN_METHYL_CP_G_BINDING_DOMAIN_METHOD",
                "MDA",
                "MF_METHOD",
                "M_NASE_METHOD",
                "MSLL_METHOD",
                "OLIGO_D_T",
                "PADLOCK_PROBES_CAPTURE_METHOD",
                "PCR_METHOD",
                "POLY_A",
                "RACE_METHOD",
                "RANDOM_PCR_METHOD",
                "RANDOM_METHOD",
                "RT_PCR_METHOD",
                "REDUCED_REPRESENTATION_METHOD",
                "REPEAT_FRACTIONATION",
                "RESTRICTION_DIGEST_METHOD",
                "SIZE_FRACTIONATION_METHOD",
                "UNSPECIFIED",
                "OTHER"
              ],
              "title": "LibraryPreparationLibrarySelectionEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryTypeEnum": {
              "description": "The type of the library",
              "enum": [
                "WGS",
                "WXS",
                "WCS",
                "TOTAL_RNA",
                "M_RNA",
                "MI_RNA",
                "NC_RNA",
                "ATAC",
                "METHYLATION",
                "CHROMOSOME_CONFORMATION_CAPTURE"
              ],
              "title": "LibraryPreparationLibraryTypeEnum",
              "type": "string"
            },
            "LibraryPreparationRNASeqStrandednessEnum": {
              "description": "Permitted values for library preparation RNASeq strandedness",
              "enum": [
                "SENSE",
                "ANTISENSE",
                "BOTH"
              ],
              "title": "LibraryPreparationRNASeqStrandednessEnum",
              "type": "string"
            },
            "PrimerEnum": {
              "description": "Permitted values for primer",
              "enum": [
                "OLIGO_D_T",
                "RANDOM",
                "GENE_SPECIFIC",
                "OTHER"
              ],
              "title": "PrimerEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcess": {
        "name": "SequencingProcess",
        "description": "A sequencing process linking a sample to sequencing output.",
        "anchor_point": {
          "target_class": "SequencingProcess",
          "identifier_slot": "accession",
          "root_slot": "sequencing_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sequencing process linking a sample to sequencing output.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "index_sequence": {
              "description": "A unique nucleotide sequence that is added to a sample during library_preparation to serve as a unique identifier for the sample.",
              "type": "string"
            },
            "lane_number": {
              "description": "The numerical identifier for the lane or machine unit where a sample was located during nucleotide sequencing.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "sequencing_experiment": {
              "description": "The sequencing experiment associated with an entity.",
              "type": "string"
            },
            "sequencing_lane_id": {
              "description": "Identifier of the sequencing lane. Used for batch correction.",
              "type": "string"
            },
            "sequencing_machine_id": {
              "description": "Identifier of the sequencing machine. Used for batch correction.",
              "type": "string"
            },
            "sequencing_process_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_run_id": {
              "description": "Identifier of the sequencing run. Used for batch correction.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "sequencing_experiment",
            "sample",
            "alias",
            "accession",
            "sequencing_process_files"
          ],
          "title": "SequencingProcess",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Individual": {
        "name": "Individual",
        "description": "An Individual is a Person who is participating in a Study.",
        "anchor_point": {
          "target_class": "Individual",
          "identifier_slot": "accession",
          "root_slot": "individuals"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Individual is a Person who is participating in a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "ancestries": {
              "description": "A person's descent or lineage, from a person or from a population.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "biospecimens": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "geographical_region": {
              "description": "The geographical region where the Individual is located. Any demarcated area of the Earth; may be determined by both natural and human boundaries.",
              "type": "string"
            },
            "karyotype": {
              "$ref": "#/$defs/KaryotypeEnum",
              "description": "The karyotype of an individual if defined."
            },
            "phenotypic_features": {
              "description": "The Phenotypic Feature entity that is associated with this Biospecimen at the time of retrieval from the organism. Typically, a concept from Human Phenotype Ontology. For example, 'HP:0100244' indicates that the Individual - from_which_the_Biospecimen was extracted from - exhibits_'Fibrosarcoma'_as_one_of_its_phenotype.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sex": {
              "$ref": "#/$defs/IndividualSexEnum",
              "description": "The assemblage of physical properties or qualities by which male is distinguished from female; the physical difference between male and female; the distinguishing peculiarity of male or female."
            }
          },
          "required": [
            "sex",
            "alias",
            "accession",
            "biospecimens"
          ],
          "title": "Individual",
          "type": "object",
          "$defs": {
            "IndividualSexEnum": {
              "description": "The sex of an Individual as as defined in a specific medical and clinical context.",
              "enum": [
                "FEMALE_SEX_FOR_CLINICAL_USE",
                "IMAGING_SEX",
                "MALE_SEX_FOR_CLINICAL_USE",
                "SPECIFIED_SEX_FOR_CLINICAL_USE",
                "UNKNOWN_SEX_FOR_CLINICAL_USE"
              ],
              "title": "IndividualSexEnum",
              "type": "string"
            },
            "KaryotypeEnum": {
              "description": "Permitted values for karyotype",
              "enum": [
                "46_XY",
                "46_XX",
                "OTHER"
              ],
              "title": "KaryotypeEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcessFile": {
        "name": "SequencingProcessFile",
        "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
        "anchor_point": {
          "target_class": "SequencingProcessFile",
          "identifier_slot": "accession",
          "root_slot": "sequencing_process_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sequencing_process": {
              "description": "The SequencingProcess associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sequencing_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SequencingProcessFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProtocol": {
        "name": "SequencingProtocol",
        "description": "Information about the sequencing of a sample.",
        "anchor_point": {
          "target_class": "SequencingProtocol",
          "identifier_slot": "accession",
          "root_slot": "sequencing_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the sequencing of a sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this Sequencing Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "cell_barcode_offset": {
              "description": "The offset in sequence of the cell identifying barcode. (Eg. '0').",
              "type": "string"
            },
            "cell_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the cell barcode (eg: index1/index2/read1/read2)."
            },
            "cell_barcode_size": {
              "description": "The size of the cell identifying barcode (E.g. '16').",
              "type": "string"
            },
            "description": {
              "description": "Description about the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "flow_cell_id": {
              "description": "Flow Cell ID (eg: Experiment ID_Cell 1_Lane_1). The barcode assigned to a flow cell used in nucleotide sequencing.",
              "type": "string"
            },
            "flow_cell_type": {
              "$ref": "#/$defs/FlowCellTypeEnum",
              "description": "Type of flow cell used (e.g. S4, S2 for NovaSeq; PromethION, Flongle for Nanopore). Aparatus in the fluidic subsystem where the sheath and sample meet. Can be one of several types; jet-in-air, quartz cuvette, or a hybrid of the two. The sample flows through the center of a fluid column of sheath fluid in the flow cell."
            },
            "instrument_model": {
              "$ref": "#/$defs/InstrumentModelEnum",
              "description": "The name and model of the technology platform used to perform sequencing."
            },
            "sample_barcode_read": {
              "$ref": "#/$defs/SampleBarcodeReadEnum",
              "description": "The type of read that contains the sample barcode (eg: index1/index2/read1/read2)."
            },
            "sequencing_center": {
              "description": "Center where sample was sequenced.",
              "type": "string"
            },
            "sequencing_experiments": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_read_length": {
              "description": "Length of sequencing reads (eg: Long or short or actual number of the read length etc). The number of nucleotides successfully ordered from each side of a nucleic acid fragment obtained after the completion of a sequencing process",
              "type": "string"
            },
            "target_coverage": {
              "description": "Mean coverage for whole genome sequencing, or mean target coverage for whole exome and targeted sequencing. The number of times a particular locus (site, nucleotide, amplicon, region) was sequenced.",
              "type": "string"
            },
            "type": {
              "description": "Type of the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "umi_barcode_offset": {
              "description": "The offset in sequence of the UMI identifying barcode. (E.g. '16').",
              "type": "string"
            },
            "umi_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the UMI barcode (Eg: index1/index2/read1/read2)."
            },
            "umi_barcode_size": {
              "description": "The size of the UMI identifying barcode (Eg. '10').",
              "type": "string"
            }
          },
          "required": [
            "description",
            "instrument_model",
            "alias",
            "accession",
            "sequencing_experiments"
          ],
          "title": "SequencingProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "FlowCellTypeEnum": {
              "description": "Permitted values for flow cell type",
              "enum": [
                "ILLUMINA_NOVA_SEQ_S2",
                "ILLUMINA_NOVA_SEQ_S4",
                "PROMETH_ION",
                "FLONGLE",
                "MIN_ION",
                "GRID_ION",
                "OTHER"
              ],
              "title": "FlowCellTypeEnum",
              "type": "string"
            },
            "IndexReadEnum": {
              "description": "Permitted Values to indicate the location of a sequence component in a read or index",
              "enum": [
                "INDEX1",
                "INDEX2",
                "READ1",
                "READ2"
              ],
              "title": "IndexReadEnum",
              "type": "string"
            },
            "InstrumentModelEnum": {
              "description": "Permitted values for instrument model",
              "enum": [
                "ILLUMINA_HI_SCAN",
                "ILLUMINA_HI_SEQ_1000",
                "ILLUMINA_HI_SEQ_1500",
                "ILLUMINA_HI_SEQ_2000",
                "ILLUMINA_HI_SEQ_2500",
                "ILLUMINA_HI_SEQ_3000",
                "ILLUMINA_HI_SEQ_4000",
                "ILLUMINA_HI_SEQ_X_FIVE",
                "ILLUMINA_HI_SEQ_X_TEN",
                "ILLUMINA_HI_SEQ_X",
                "ILLUMINA_I_SCAN",
                "ILLUMINA_I_SEQ_100",
                "ILLUMINA_MINI_SEQ",
                "ILLUMINA_MI_SEQ",
                "ILLUMINA_MI_SEQ_DX",
                "ILLUMINA_MI_SEQ_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_500",
                "ILLUMINA_NEXT_SEQ_550",
                "ILLUMINA_NEXT_SEQ_550_DX",
                "ILLUMINA_NEXT_SEQ_550_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_1000",
                "ILLUMINA_NEXT_SEQ_2000",
                "ILLUMINA_NOVA_SEQ_6000",
                "ILLUMINA_GENOME_ANALYZER",
                "ILLUMINA_GENOME_ANALYZER_II",
                "ILLUMINA_GENOME_ANALYZER_IIX",
                "ILLUMINA_HI_SCAN_SQ",
                "PAC_BIO_REVIO",
                "PAC_BIO_ONSO",
                "PAC_BIO_SEQUEL_IIE",
                "PAC_BIO_SEQUEL_II",
                "PAC_BIO_SEQUEL",
                "PAC_BIO_RS",
                "PAC_BIO_RS_II",
                "ONT_MIN_ION",
                "ONT_GRID_ION",
                "ONT_PROMETH_ION",
                "DNBSEQ_G50",
                "DNBSEQ_T7",
                "DNBSEQ_G400",
                "DNBSEQ_G400_FAST",
                "ULTIMA_UG_100",
                "OTHER"
              ],
              "title": "InstrumentModelEnum",
              "type": "string"
            },
            "SampleBarcodeReadEnum": {
              "description": "Permitted values for sample barcode read",
              "enum": [
                "INDEX1",
                "INDEX1_AND_INDEX2",
                "OTHER"
              ],
              "title": "SampleBarcodeReadEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcessOutputFile": {
        "name": "AnalysisProcessOutputFile",
        "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
        "anchor_point": {
          "target_class": "AnalysisProcessOutputFile",
          "identifier_slot": "accession",
          "root_slot": "analysis_process_output_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process": {
              "description": "The AnalysisProcess associated with an entity.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "analysis_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "AnalysisProcessOutputFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SampleFile": {
        "name": "SampleFile",
        "description": "A SampleFile is a File that is associated with a Sample.",
        "anchor_point": {
          "target_class": "SampleFile",
          "identifier_slot": "accession",
          "root_slot": "sample_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SampleFile is a File that is associated with a Sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sample",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SampleFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "StudyFile": {
        "name": "StudyFile",
        "description": "A StudyFile is a File that is associated with a Study.",
        "anchor_point": {
          "target_class": "StudyFile",
          "identifier_slot": "accession",
          "root_slot": "study_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A StudyFile is a File that is associated with a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            }
          },
          "required": [
            "study",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "StudyFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "Publication": {
        "name": "Publication",
        "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
        "anchor_point": {
          "target_class": "Publication",
          "identifier_slot": "accession",
          "root_slot": "publications"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
          "properties": {
            "abstract": {
              "description": "The study abstract that describes the goals. Can also hold abstract from a publication related to this study.",
              "type": "string"
            },
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "author": {
              "description": "The individual who is responsible for the content of a document version.",
              "type": "string"
            },
            "doi": {
              "description": "DOI identifier of the Publication.",
              "type": "string"
            },
            "journal": {
              "description": "Name of the journal.",
              "type": "string"
            },
            "study": {
              "description": "The Study entity associated with this Publication.",
              "type": "string"
            },
            "title": {
              "description": "The title for the Publication.",
              "type": "string"
            },
            "xref": {
              "description": "One or more cross-references for this Publication.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "year": {
              "description": "Year in which the paper was published.",
              "type": "integer"
            }
          },
          "required": [
            "doi",
            "study",
            "alias",
            "accession"
          ],
          "title": "Publication",
          "type": "object",
          "$defs": {}
        }
      }
    }
  },
  {
    "name": "embedded_public",
    "description": "embedded_public",
    "resource_classes": {
      "DataAccessCommittee": {
        "name": "DataAccessCommittee",
        "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
        "anchor_point": {
          "target_class": "DataAccessCommittee",
          "identifier_slot": "accession",
          "root_slot": "data_access_committees"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A group of members that are delegated to grant access to one or more datasets after ensuring the minimum criteria for data sharing has been met, and request for data use does not raise ethical and/or legal concerns.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "email": {
              "description": "Email of a person.",
              "type": "string"
            },
            "institute": {
              "description": "The institute a person is affiliated with.",
              "type": "string"
            }
          },
          "required": [
            "email",
            "institute",
            "alias",
            "accession"
          ],
          "title": "DataAccessCommittee",
          "type": "object",
          "$defs": {}
        }
      },
      "DataAccessPolicy": {
        "name": "DataAccessPolicy",
        "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
        "anchor_point": {
          "target_class": "DataAccessPolicy",
          "identifier_slot": "accession",
          "root_slot": "data_access_policies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "data_access_committee": {
              "description": "The Data Access Committee linked to this policy.",
              "type": "string"
            },
            "data_use_modifiers": {
              "description": "Modifier for Data use permission associated with a policy. Should be descendants of 'DUO:0000017 data use modifier'",
              "items": {
                "$ref": "#/$defs/DataUseModifierEnum"
              },
              "type": "array"
            },
            "data_use_permission": {
              "$ref": "#/$defs/DataUsePermissionEnum",
              "description": "Data use permission associated with a policy. Typically one or more terms from DUO and should be descendants of 'DUO:0000001 data use permission'."
            },
            "description": {
              "description": "A short description for the Data Access Policy.",
              "type": "string"
            },
            "name": {
              "description": "A name for the Data Access Policy.",
              "type": "string"
            },
            "policy_text": {
              "description": "The terms of data use and policy verbiage should be captured here.",
              "type": "string"
            },
            "policy_url": {
              "description": "URL for the policy, if available. This is useful if the terms of the policy is made available online at a resolvable URL.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "description",
            "policy_text",
            "data_access_committee",
            "data_use_permission",
            "alias",
            "accession"
          ],
          "title": "DataAccessPolicy",
          "type": "object",
          "$defs": {
            "DataUseModifierEnum": {
              "description": "Permitted values for data use modifier",
              "enum": [
                "clinical care use",
                "return to database or resource",
                "institution specific restriction",
                "project specific restriction",
                "user specific restriction",
                "time limit on use",
                "publication moratorium",
                "geographical restriction",
                "ethics approval required",
                "collaboration required",
                "publication required",
                "not for profit, non commercial use only",
                "non-commercial use only",
                "not for profit organisation use only",
                "genetic studies only",
                "no general methods research",
                "research specific restrictions",
                "population origins or ancestry research prohibited"
              ],
              "title": "DataUseModifierEnum",
              "type": "string"
            },
            "DataUsePermissionEnum": {
              "description": "Permitted values for data use permission",
              "enum": [
                "general research use",
                "health or medical or biomedical research",
                "disease specific research",
                "no restriction",
                "population origins or ancestry research only"
              ],
              "title": "DataUsePermissionEnum",
              "type": "string"
            }
          }
        }
      },
      "Biospecimen": {
        "name": "Biospecimen",
        "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
        "anchor_point": {
          "target_class": "Biospecimen",
          "identifier_slot": "accession",
          "root_slot": "biospecimens"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Biospecimen is any natural material taken from a biological entity (usually a human) for testing, diagnostics, treatment, or research purposes. The Biospecimen is linked to the Individual from which the Biospecimen is derived.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "age_at_sampling": {
              "$ref": "#/$defs/AgeRangeEnum",
              "description": "Age of an individual."
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "individual": {
              "description": "The Individual entity from which this Biospecimen was derived.",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "tissue": {
              "type": "string"
            },
            "type": {
              "description": "The type of Biospecimen.",
              "type": "string"
            },
            "vital_status_at_sampling": {
              "$ref": "#/$defs/VitalStatusEnum",
              "description": "Vital Status of an Individual at the point of sampling (eg:'Alive', 'Deceased')."
            }
          },
          "required": [
            "individual",
            "age_at_sampling",
            "tissue",
            "alias",
            "accession",
            "samples"
          ],
          "title": "Biospecimen",
          "type": "object",
          "$defs": {
            "AgeRangeEnum": {
              "description": "Enum to capture the age range that an Indiviudal belongs to.",
              "enum": [
                "0_TO_5",
                "6_TO_10",
                "11_TO_15",
                "16_TO_20",
                "21_TO_25",
                "26_TO_30",
                "31_TO_35",
                "36_TO_40",
                "41_TO_45",
                "46_TO_50",
                "51_TO_55",
                "56_TO_60",
                "61_TO_65",
                "66_TO_70",
                "71_TO_75",
                "76_TO_80",
                "81_OR_OLDER",
                "UNKNOWN"
              ],
              "title": "AgeRangeEnum",
              "type": "string"
            },
            "VitalStatusEnum": {
              "description": "Enum to capture the vital status of an individual.",
              "enum": [
                "ALIVE",
                "DECEASED",
                "UNKNOWN"
              ],
              "title": "VitalStatusEnum",
              "type": "string"
            }
          }
        }
      },
      "Sample": {
        "name": "Sample",
        "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
        "anchor_point": {
          "target_class": "Sample",
          "identifier_slot": "accession",
          "root_slot": "samples"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "biospecimen": {
              "description": "The Biospecimen from which this Sample was prepared from.",
              "type": "string"
            },
            "condition": {
              "description": "The condition associated with an entity.",
              "type": "string"
            },
            "description": {
              "description": "Short textual description of the sample (How the sample was collected, sample source, Protocol followed for processing the sample etc).",
              "type": "string"
            },
            "isolation": {
              "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
              "type": "string"
            },
            "name": {
              "description": "Name of the sample (eg:GHGAS_Blood_Sample1 or GHGAS_PBMC_RNAseq_S1).",
              "type": "string"
            },
            "sample_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "storage": {
              "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/SampleTypeEnum",
              "description": "The type of sample."
            },
            "xref": {
              "description": "One or more cross-references for this Sample. For example, this Sample may have an EBI BioSamples accession or an EGA Sample accession.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "description",
            "condition",
            "alias",
            "accession",
            "sample_files",
            "sequencing_processes"
          ],
          "title": "Sample",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "SampleTypeEnum": {
              "description": "The type of a sample",
              "enum": [
                "CF_DNA",
                "DEPLETED_RNA",
                "DS_DNA_CH_IP",
                "FFPE_DNA",
                "FFPE_TOTAL_RNA",
                "GENOMIC_DNA",
                "PCR_PRODUCTS",
                "POLY_A_RNA",
                "SINGLE_CELL_DNA",
                "SINGLE_CELL_RNA",
                "SMALL_RNA",
                "TOTAL_RNA"
              ],
              "title": "SampleTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcess": {
        "name": "AnalysisProcess",
        "description": null,
        "anchor_point": {
          "target_class": "AnalysisProcess",
          "identifier_slot": "accession",
          "root_slot": "analysis_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis": {
              "description": "The Analysis the AnalysisProcess was part of",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sample_input_files": {
              "description": "The SampleFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_input_files": {
              "description": "The SequencingProcessFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_input_files": {
              "description": "The StudyFile associated used as an input for an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "analysis",
            "alias",
            "accession",
            "analysis_process_output_files"
          ],
          "title": "AnalysisProcess",
          "type": "object",
          "$defs": {}
        }
      },
      "EmbeddedDataset": {
        "name": "EmbeddedDataset",
        "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
        "anchor_point": {
          "target_class": "EmbeddedDataset",
          "identifier_slot": "accession",
          "root_slot": "embedded_dataset"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "$ref": "#/$defs/EmbeddedAnalysisProcessOutputFile"
              },
              "type": "array"
            },
            "data_access_policy": {
              "$ref": "#/$defs/EmbeddedDataAccessPolicy",
              "description": "The Data Access Policy that applies to this Dataset."
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "files": {
              "description": "All files associated with the dataset.",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              },
              "type": "array"
            },
            "sample_files": {
              "items": {
                "$ref": "#/$defs/EmbeddedSampleFile"
              },
              "type": "array"
            },
            "samples": {
              "items": {
                "$ref": "#/$defs/Sample"
              },
              "type": "array"
            },
            "sequencing_process_files": {
              "items": {
                "$ref": "#/$defs/EmbeddedSequencingProcessFile"
              },
              "type": "array"
            },
            "studies": {
              "items": {
                "$ref": "#/$defs/Study"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "$ref": "#/$defs/EmbeddedStudyFile"
              },
              "type": "array"
            },
            "title": {
              "description": "A title for the submitted Dataset.",
              "type": "string"
            },
            "types": {
              "description": "The type of a dataset.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "title",
            "description",
            "types",
            "data_access_policy",
            "alias",
            "accession",
            "analysis_process_output_files",
            "sequencing_process_files",
            "study_files",
            "studies",
            "sample_files",
            "samples",
            "files"
          ],
          "title": "EmbeddedDataset",
          "type": "object",
          "$defs": {
            "EmbeddedAnalysisProcessOutputFile": {
              "additionalProperties": false,
              "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "analysis_process": {
                  "$ref": "#/$defs/AnalysisProcess",
                  "description": "The AnalysisProcess associated with an entity."
                },
                "checksum": {
                  "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
                  "type": "string"
                },
                "checksum_type": {
                  "description": "The type of algorithm used to generate the checksum of a file.",
                  "type": "string"
                },
                "dataset": {
                  "description": "The Dataset associated with an entity.",
                  "type": "string"
                },
                "format": {
                  "$ref": "#/$defs/FileFormatEnum",
                  "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
                },
                "forward_or_reverse": {
                  "$ref": "#/$defs/ForwardOrReverseEnum",
                  "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
                },
                "name": {
                  "description": "The given filename.",
                  "type": "string"
                },
                "size": {
                  "description": "The size of a file in bytes.",
                  "type": "integer"
                }
              },
              "required": [
                "analysis_process",
                "name",
                "format",
                "size",
                "checksum",
                "checksum_type",
                "dataset",
                "alias",
                "accession"
              ],
              "title": "EmbeddedAnalysisProcessOutputFile",
              "type": "object"
            },
            "EmbeddedDataAccessPolicy": {
              "additionalProperties": false,
              "description": "A Data Access Policy specifies under which circumstances, legal or otherwise, a user can have access to one or more Datasets belonging to one or more Studies.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "data_access_committee": {
                  "$ref": "#/$defs/DataAccessCommittee",
                  "description": "The Data Access Committee linked to this policy."
                },
                "data_use_modifiers": {
                  "description": "Modifier for Data use permission associated with a policy. Should be descendants of 'DUO:0000017 data use modifier'",
                  "items": {
                    "$ref": "#/$defs/DataUseModifierEnum"
                  },
                  "type": "array"
                },
                "data_use_permission": {
                  "$ref": "#/$defs/DataUsePermissionEnum",
                  "description": "Data use permission associated with a policy. Typically one or more terms from DUO and should be descendants of 'DUO:0000001 data use permission'."
                },
                "description": {
                  "description": "A short description for the Data Access Policy.",
                  "type": "string"
                },
                "name": {
                  "description": "A name for the Data Access Policy.",
                  "type": "string"
                },
                "policy_text": {
                  "description": "The terms of data use and policy verbiage should be captured here.",
                  "type": "string"
                },
                "policy_url": {
                  "description": "URL for the policy, if available. This is useful if the terms of the policy is made available online at a resolvable URL.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "description",
                "policy_text",
                "data_access_committee",
                "data_use_permission",
                "alias",
                "accession"
              ],
              "title": "EmbeddedDataAccessPolicy",
              "type": "object"
            },
            "EmbeddedSampleFile": {
              "additionalProperties": false,
              "description": "A SampleFile is a File that is associated with a Sample.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "checksum": {
                  "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
                  "type": "string"
                },
                "checksum_type": {
                  "description": "The type of algorithm used to generate the checksum of a file.",
                  "type": "string"
                },
                "dataset": {
                  "description": "The Dataset associated with an entity.",
                  "type": "string"
                },
                "format": {
                  "$ref": "#/$defs/FileFormatEnum",
                  "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
                },
                "forward_or_reverse": {
                  "$ref": "#/$defs/ForwardOrReverseEnum",
                  "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
                },
                "name": {
                  "description": "The given filename.",
                  "type": "string"
                },
                "sample": {
                  "$ref": "#/$defs/Sample",
                  "description": "The sample associated with an entity."
                },
                "size": {
                  "description": "The size of a file in bytes.",
                  "type": "integer"
                }
              },
              "required": [
                "sample",
                "name",
                "format",
                "size",
                "checksum",
                "checksum_type",
                "dataset",
                "alias",
                "accession"
              ],
              "title": "EmbeddedSampleFile",
              "type": "object"
            },
            "EmbeddedSequencingProcessFile": {
              "additionalProperties": false,
              "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "checksum": {
                  "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
                  "type": "string"
                },
                "checksum_type": {
                  "description": "The type of algorithm used to generate the checksum of a file.",
                  "type": "string"
                },
                "dataset": {
                  "description": "The Dataset associated with an entity.",
                  "type": "string"
                },
                "format": {
                  "$ref": "#/$defs/FileFormatEnum",
                  "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
                },
                "forward_or_reverse": {
                  "$ref": "#/$defs/ForwardOrReverseEnum",
                  "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
                },
                "name": {
                  "description": "The given filename.",
                  "type": "string"
                },
                "sequencing_process": {
                  "$ref": "#/$defs/SequencingProcess",
                  "description": "The SequencingProcess associated with an entity."
                },
                "size": {
                  "description": "The size of a file in bytes.",
                  "type": "integer"
                }
              },
              "required": [
                "sequencing_process",
                "name",
                "format",
                "size",
                "checksum",
                "checksum_type",
                "dataset",
                "alias",
                "accession"
              ],
              "title": "EmbeddedSequencingProcessFile",
              "type": "object"
            },
            "EmbeddedStudyFile": {
              "additionalProperties": false,
              "description": "A StudyFile is a File that is associated with a Study.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "checksum": {
                  "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
                  "type": "string"
                },
                "checksum_type": {
                  "description": "The type of algorithm used to generate the checksum of a file.",
                  "type": "string"
                },
                "dataset": {
                  "description": "The Dataset associated with an entity.",
                  "type": "string"
                },
                "format": {
                  "$ref": "#/$defs/FileFormatEnum",
                  "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
                },
                "forward_or_reverse": {
                  "$ref": "#/$defs/ForwardOrReverseEnum",
                  "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
                },
                "name": {
                  "description": "The given filename.",
                  "type": "string"
                },
                "size": {
                  "description": "The size of a file in bytes.",
                  "type": "integer"
                },
                "study": {
                  "$ref": "#/$defs/Study",
                  "description": "The study associated with an entity."
                }
              },
              "required": [
                "study",
                "name",
                "format",
                "size",
                "checksum",
                "checksum_type",
                "dataset",
                "alias",
                "accession"
              ],
              "title": "EmbeddedStudyFile",
              "type": "object"
            },
            "Sample": {
              "additionalProperties": false,
              "description": "A sample is a limited quantity of something to be used for testing, analysis, inspection, investigation, demonstration, or trial use. A sample is prepared from a Biospecimen (isolate or tissue).",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "attributes": {
                  "description": "Key/value pairs corresponding to an entity.",
                  "items": {
                    "$ref": "#/$defs/Attribute"
                  },
                  "type": "array"
                },
                "biospecimen": {
                  "description": "The Biospecimen from which this Sample was prepared from.",
                  "type": "string"
                },
                "condition": {
                  "description": "The condition associated with an entity.",
                  "type": "string"
                },
                "description": {
                  "description": "Short textual description of the sample (How the sample was collected, sample source, Protocol followed for processing the sample etc).",
                  "type": "string"
                },
                "isolation": {
                  "description": "Method or device employed for collecting/isolating a biospecimen or a sample.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the sample (eg:GHGAS_Blood_Sample1 or GHGAS_PBMC_RNAseq_S1).",
                  "type": "string"
                },
                "sample_files": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "sequencing_processes": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "storage": {
                  "description": "Methods by which a biospecimen or a sample is stored (e.g. frozen in liquid nitrogen).",
                  "type": "string"
                },
                "type": {
                  "$ref": "#/$defs/SampleTypeEnum",
                  "description": "The type of sample."
                },
                "xref": {
                  "description": "One or more cross-references for this Sample. For example, this Sample may have an EBI BioSamples accession or an EGA Sample accession.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name",
                "description",
                "condition",
                "alias",
                "accession",
                "sample_files",
                "sequencing_processes"
              ],
              "title": "Sample",
              "type": "object"
            },
            "Study": {
              "additionalProperties": false,
              "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
              "properties": {
                "accession": {
                  "description": "The accession for an entity.",
                  "type": "string"
                },
                "affiliations": {
                  "description": "The Institution(s) associated with an entity.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "alias": {
                  "description": "The alias for an entity at the time of submission.",
                  "type": "string"
                },
                "attributes": {
                  "description": "Custom key/value pairs that further characterizes the Study. (e.g.: approaches - single-cell,_bulk_etc)",
                  "items": {
                    "$ref": "#/$defs/Attribute"
                  },
                  "type": "array"
                },
                "conditions": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "A detailed description (abstract) that describes the goals of this Study.",
                  "type": "string"
                },
                "publications": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "study_files": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "title": {
                  "description": "A comprehensive title for the study.",
                  "type": "string"
                },
                "type": {
                  "$ref": "#/$defs/StudyTypeEnum",
                  "description": "The type of Study. For example, 'Cancer Genomics', 'Epigenetics', 'Exome Sequencing'."
                }
              },
              "required": [
                "title",
                "description",
                "type",
                "affiliations",
                "alias",
                "accession",
                "conditions",
                "study_files",
                "publications"
              ],
              "title": "Study",
              "type": "object"
            }
          }
        }
      },
      "SequencingExperiment": {
        "name": "SequencingExperiment",
        "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
        "anchor_point": {
          "target_class": "SequencingExperiment",
          "identifier_slot": "accession",
          "root_slot": "sequencing_experiments"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An sequencing experiment is an investigation that consists of a coordinated set of actions and observations designed to generate data with the goal of verifying, falsifying, or establishing the validity of a hypothesis.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description of the Experiment.",
              "type": "string"
            },
            "library_preparation_protocol": {
              "description": "The library_preparation Protocol associated with an entity.",
              "type": "string"
            },
            "sequencing_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_protocol": {
              "description": "The sequencing protocol associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "Name for the experiment (eg: GHGAE_PBMC_RNAseq).",
              "type": "string"
            },
            "type": {
              "description": "The type of sequencing experiment.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "sequencing_protocol",
            "library_preparation_protocol",
            "alias",
            "accession",
            "sequencing_processes"
          ],
          "title": "SequencingExperiment",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Analysis": {
        "name": "Analysis",
        "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
        "anchor_point": {
          "target_class": "Analysis",
          "identifier_slot": "accession",
          "root_slot": "analyses"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Analysis is a data transformation that transforms input data to output data. The workflow used to achieve this transformation and the individual steps are also captured.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_processes": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": {
              "description": "Describing how an Analysis was carried out. (e.g.: computational tools, settings, etc.).",
              "type": "string"
            },
            "reference_chromosome": {
              "description": "The reference chromosome used for this Analysis.",
              "type": "string"
            },
            "reference_genome": {
              "description": "A published genetic sequence that is used as a reference sequence against which other sequences are compared. Reference genome(s) or annotation(s) used for prior analyses (eg: GRCh38.p13).",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            },
            "type": {
              "description": "The type of the Analysis. Either Reference Alignment (BAM) or Sequence Variation (VCF)",
              "type": "string"
            }
          },
          "required": [
            "reference_genome",
            "reference_chromosome",
            "alias",
            "accession",
            "analysis_processes"
          ],
          "title": "Analysis",
          "type": "object",
          "$defs": {}
        }
      },
      "Dataset": {
        "name": "Dataset",
        "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
        "anchor_point": {
          "target_class": "Dataset",
          "identifier_slot": "accession",
          "root_slot": "datasets"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A Dataset is a collection of Files that is prepared for distribution and is tied to a Data Access Policy.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process_output_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "data_access_policy": {
              "description": "The Data Access Policy that applies to this Dataset.",
              "type": "string"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "files": {
              "description": "All files associated with the dataset.",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "string"
              },
              "type": "array"
            },
            "sample_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_process_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studies": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A title for the submitted Dataset.",
              "type": "string"
            },
            "types": {
              "description": "The type of a dataset.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "title",
            "description",
            "types",
            "data_access_policy",
            "alias",
            "accession",
            "analysis_process_output_files",
            "sequencing_process_files",
            "study_files",
            "studies",
            "sample_files",
            "samples",
            "files"
          ],
          "title": "Dataset",
          "type": "object",
          "$defs": {}
        }
      },
      "Trio": {
        "name": "Trio",
        "description": "A trio is defined by three individuals representing an individual and their parents.",
        "anchor_point": {
          "target_class": "Trio",
          "identifier_slot": "accession",
          "root_slot": "trios"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A trio is defined by three individuals representing an individual and their parents.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "child": {
              "description": "The child of two individuals.",
              "type": "string"
            },
            "father": {
              "description": "The father of an individual.",
              "type": "string"
            },
            "mother": {
              "description": "The mother of an individual.",
              "type": "string"
            }
          },
          "required": [
            "mother",
            "father",
            "child",
            "alias",
            "accession"
          ],
          "title": "Trio",
          "type": "object",
          "$defs": {}
        }
      },
      "Condition": {
        "name": "Condition",
        "description": "An condition that is linked to comparable samples.",
        "anchor_point": {
          "target_class": "Condition",
          "identifier_slot": "accession",
          "root_slot": "conditions"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An condition that is linked to comparable samples.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "case_control_status": {
              "$ref": "#/$defs/CaseControlStatusEnum",
              "description": "Whether a condition corresponds to a treatment or a control."
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "disease_or_healthy": {
              "$ref": "#/$defs/DiseaseOrHealthyEnum",
              "description": "Whether a condition corresponds to a disease or a healthy state."
            },
            "mutant_or_wildtype": {
              "$ref": "#/$defs/MutantOrWildtypeEnum",
              "description": "Whether a condition corresponds to a mutant or a wildtype."
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "samples": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "disease_or_healthy",
            "case_control_status",
            "mutant_or_wildtype",
            "study",
            "alias",
            "accession",
            "samples"
          ],
          "title": "Condition",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "CaseControlStatusEnum": {
              "description": "Enum to capture whether a condition corresponds to a case or a control condition.",
              "enum": [
                "NEITHER_CASE_OR_CONTROL_STATUS",
                "PROBABLE_CASE_STATUS",
                "PROBABLE_CONTROL_STATUS",
                "TRUE_CASE_STATUS",
                "TRUE_CONTROL_STATUS",
                "UNABLE_TO_ASSESS_CASE_OR_CONTROL_STATUS"
              ],
              "title": "CaseControlStatusEnum",
              "type": "string"
            },
            "DiseaseOrHealthyEnum": {
              "description": "Enum to capture whether a condition corresponds to a disease or a healthy state.",
              "enum": [
                "DISEASE",
                "HEALTHY",
                "NOT_APPLICABLE"
              ],
              "title": "DiseaseOrHealthyEnum",
              "type": "string"
            },
            "MutantOrWildtypeEnum": {
              "description": "Enum to capture whether a condition corresponds to a mutant or a wildtype.",
              "enum": [
                "MUTANT",
                "WILDTYPE",
                "NOT_APPLICABLE"
              ],
              "title": "MutantOrWildtypeEnum",
              "type": "string"
            }
          }
        }
      },
      "Study": {
        "name": "Study",
        "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
        "anchor_point": {
          "target_class": "Study",
          "identifier_slot": "accession",
          "root_slot": "studies"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Studies are experimental investigations of a particular phenomenon. It involves a detailed examination and analysis of a subject to learn more about the phenomenon being studied.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "affiliations": {
              "description": "The Institution(s) associated with an entity.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Custom key/value pairs that further characterizes the Study. (e.g.: approaches - single-cell,_bulk_etc)",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "conditions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": {
              "description": "A detailed description (abstract) that describes the goals of this Study.",
              "type": "string"
            },
            "publications": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "study_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "title": {
              "description": "A comprehensive title for the study.",
              "type": "string"
            },
            "type": {
              "$ref": "#/$defs/StudyTypeEnum",
              "description": "The type of Study. For example, 'Cancer Genomics', 'Epigenetics', 'Exome Sequencing'."
            }
          },
          "required": [
            "title",
            "description",
            "type",
            "affiliations",
            "alias",
            "accession",
            "conditions",
            "study_files",
            "publications"
          ],
          "title": "Study",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "StudyTypeEnum": {
              "description": "Enum to capture the type of a study.",
              "enum": [
                "CANCER_GENOMICS",
                "EPIGENETICS",
                "EXOME_SEQUENCING",
                "FORENSIC_GENETICS",
                "PALEO_GENOMICS",
                "GENE_REGULATION_STUDY",
                "METAGENOMICS",
                "OTHER",
                "POOLED_CLONE_SEQUENCING",
                "POPULATION_GENOMICS",
                "RNASEQ",
                "RESEQUENCING",
                "SYNTHETIC_GENOMICS",
                "TRANSCRIPTOME_ANALYSIS",
                "WHOLE_GENOME_SEQUENCING",
                "GWAS"
              ],
              "title": "StudyTypeEnum",
              "type": "string"
            }
          }
        }
      },
      "LibraryPreparationProtocol": {
        "name": "LibraryPreparationProtocol",
        "description": "Information about the library_preparation of an sequencing experiment.",
        "anchor_point": {
          "target_class": "LibraryPreparationProtocol",
          "identifier_slot": "accession",
          "root_slot": "library_preparation_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the library_preparation of an sequencing experiment.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this library_preparation Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description about how a sequencing library was prepared (eg: Library construction method).",
              "type": "string"
            },
            "end_bias": {
              "$ref": "#/$defs/EndBiasEnum",
              "description": "The end of the cDNA molecule that is preferentially sequenced, e.g. 3/5 prime tag or end, or the full-length transcript."
            },
            "library_layout": {
              "$ref": "#/$defs/LibraryPreparationLibraryLayoutEnum",
              "description": "Describe whether the library was sequenced in single-end (forward or reverse) or paired-end mode"
            },
            "library_name": {
              "description": "A short name identifying the library to potential users. The same name may refer to multiple versions of the same continually updated library.",
              "type": "string"
            },
            "library_preparation": {
              "description": "The general method for sequencing library_preparation (e.g. KAPA PCR-free).",
              "type": "string"
            },
            "library_preparation_kit_manufacturer": {
              "description": "Manufacturer of library_preparation kit",
              "type": "string"
            },
            "library_preparation_kit_retail_name": {
              "$ref": "#/$defs/LibraryPreparationKitRetailNameEnum",
              "description": "A unique identifier for the kit used to construct a genomic library. This may include the vendor name, kit name and kit version (e.g. Agilent sure select Human Exome V8, Twist RefSeq Exome, etc.)"
            },
            "library_selection": {
              "$ref": "#/$defs/LibraryPreparationLibrarySelectionEnum",
              "description": "Whether any method was used to select for or against, enrich, or screen the material being sequenced. library_selection method (e.g. random, PCA, cDNA, etc )"
            },
            "library_type": {
              "$ref": "#/$defs/LibraryPreparationLibraryTypeEnum",
              "description": "Describe the level of omics analysis (eg: Metagenome, transcriptome, etc)"
            },
            "primer": {
              "$ref": "#/$defs/PrimerEnum",
              "description": "The type of primer used for reverse transcription, e.g. 'oligo-dT' or 'random' primer. This allows users to identify content of the cDNA library input e.g. enriched for mRNA."
            },
            "rnaseq_strandedness": {
              "$ref": "#/$defs/LibraryPreparationRNASeqStrandednessEnum",
              "description": "The strandedness of the library, whether reads come from both strands of the cDNA or only from the first (antisense) or the second (sense) strand."
            },
            "sequencing_experiments": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "target_regions": {
              "description": "Subset of genes or specific regions of the genome, which are most likely to be involved in the phenotype under study.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "description",
            "library_name",
            "library_layout",
            "library_type",
            "library_selection",
            "library_preparation",
            "alias",
            "accession",
            "sequencing_experiments"
          ],
          "title": "LibraryPreparationProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "EndBiasEnum": {
              "description": "Permitted values for end bias",
              "enum": [
                "3_PRIME_END",
                "5_PRIME_END",
                "FULL_LENGTH"
              ],
              "title": "EndBiasEnum",
              "type": "string"
            },
            "LibraryPreparationKitRetailNameEnum": {
              "description": "Permitted values for library preparation kit retail name",
              "enum": [
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V2",
                "10X_GENOMICS_CHROMIUM_SINGLE_CELL_3_V3",
                "ACCEL_NGS_2_S_PLUS_DNA_LIBRARY_KIT",
                "ACCEL_NGS_METHYL_SEQ_DNA",
                "AGILENT_STRAND_SPECIFIC_RNA",
                "AGILENT_SURE_SELECT_CUSTOM_ENRICHMENT_KIT",
                "AGILENT_SURE_SELECT_V3",
                "AGILENT_SURE_SELECT_V4",
                "AGILENT_SURE_SELECT_V4_UT_RS",
                "AGILENT_SURE_SELECT_V5",
                "AGILENT_SURE_SELECT_V5_UT_RS",
                "AGILENT_SURE_SELECT_V6",
                "AGILENT_SURE_SELECT_V6_ONE",
                "AGILENT_SURE_SELECT_V6_UT_RS",
                "AGILENT_SURE_SELECT_V7",
                "AGILENT_SURE_SELECT_WGS",
                "AGILENT_SURE_SELECT_XT_HS_HUMAN_ALL_EXON_V7",
                "AGILENT_SURE_SELECT_XT_MOUSE_ALL_EXON",
                "AGILENT_XT_HS_SURE_SELECT_CLINICAL_RESEARCH_EXOME_V2",
                "AVENIO_CT_DNA_KIT",
                "IDT_X_GEN_EXOME_RESEARCH_PANEL",
                "ILLUMINA_DNA_PCR_FREE",
                "ILLUMINA_NEXTERA_DNA_FLEX",
                "ILLUMINA_NEXTERA_EXOME_ENRICHMENT_KIT",
                "ILLUMINA_STRANDED_M_RNA_PREP_LIGATION",
                "ILLUMINA_TRU_SEQ_CH_IP_SAMPLE_PREPARATION_KIT",
                "ILLUMINA_TRU_SEQ_CUSTOM_AMPLICON",
                "ILLUMINA_TRU_SEQ_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA",
                "ILLUMINA_TRU_SEQ_NANO_DNA_HT",
                "ILLUMINA_TRU_SEQ_NANO_DNA_LT",
                "ILLUMINA_TRU_SEQ_NANO_FFPE_DNA",
                "ILLUMINA_TRU_SEQ_PCR_FREE",
                "ILLUMINA_TRU_SEQ_PCR_FREE_DNA",
                "ILLUMINA_TRUSEQ_PCR_FREE_METHYL",
                "ILLUMINA_TRU_SEQ_RNA",
                "ILLUMINA_TRU_SEQ_SMALL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_KIT",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_LIBRARY_PREP_GLOBIN",
                "ILLUMINA_TRU_SEQ_STRANDED_TOTAL_RNA_RIBO_MINUS_GOLD",
                "ILLUMINA_VAHTS_TOTAL_RNA",
                "INFORM_ONCO_PANEL_HG19",
                "ION_AMPLI_SEQ_EXOME_KIT",
                "KAPA_HIFI_HOT_START_READYMIX",
                "KAPA_HYPER_PREP_KIT",
                "KAPA_HYPER_PLUS_KIT",
                "KAPA_M_RNA_HYPER_PREP_KIT",
                "MAGNETIC_METHYLATED_DNA_IMMUNOPRECIPITATION_DIAGNODE",
                "NEB_NEXT_CH_IP_SEQ_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_GLOBIN_R_RNA_DEPLETION_KIT_HUMAN_MOUSE_RAT_WITH_BEADS",
                "NEB_NEXT_POLY_A_M_RNA_MAGNETIC_ISOLATION_MODULE",
                "NEB_NEXT_RNA_ULTRA_II_STRANDED",
                "NEBNEXT_ULTRA_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_DNA",
                "NEB_NEXT_ULTRA_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEB_NEXT_ULTRA_II_DIRECTIONAL_RNA",
                "NEB_NEXT_ULTRA_II_DNA_LIBRARY_PREP_KIT_FOR_ILLUMINA",
                "NEXTERA_XT_DNA",
                "OLIGO_D_T",
                "PICO_METHYL_SEQ",
                "SMART_SEQ_V4_ULTRA_LOW_INPUT_RNA_KIT",
                "SMAR_TER_STRANDED_TOTAL_RNA_SEQ_KIT",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TER_ULTRA_LOW_INPUT_RNA_V4_AND_NEB_NEXT_CH_IP_SEQ",
                "SMAR_TSEQ2_TAG",
                "SUPER_SCRIPT_II_RT_BULK",
                "SURE_CELL_ATAC_SEQ_LIBRARY_PREP_KIT",
                "SURE_SELECT_EUROFINS_ENRICHMENT_CUSTOM_01",
                "TAKARA_CLONTECH_SMAR_TER_STRANDED_TOTAL_RNA",
                "TAKARA_SMAR_TER_PREP_X_DNA_LIBRARY_KIT_ACTIVE_MOTIF_CUSTOM_INDICES_01",
                "TEMPLATE_SWITCHING_RT_ENZYME_MIX_BULK",
                "TWIST_HUMAN_CORE_EXOME_PLUS_KIT",
                "ULTRALOW_METHYL_SEQ_WITH_TRUE_METHYL_OX_BS_MODULE"
              ],
              "title": "LibraryPreparationKitRetailNameEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryLayoutEnum": {
              "description": "Single-end vs paired-end library",
              "enum": [
                "SE",
                "PE"
              ],
              "title": "LibraryPreparationLibraryLayoutEnum",
              "type": "string"
            },
            "LibraryPreparationLibrarySelectionEnum": {
              "description": "Permitted vocabulary for library selections",
              "enum": [
                "5_METHYLCYTIDINE_ANTIBODY_METHOD",
                "CAGE_METHOD",
                "C_DNA_METHOD",
                "CF_H_METHOD",
                "CF_M_METHOD",
                "CF_S_METHOD",
                "CF_T_METHOD",
                "CH_IP_SEQ_METHOD",
                "D_NASE_METHOD",
                "HMPR_METHOD",
                "HYBRID_SELECTION_METHOD",
                "INVERSE_R_RNA",
                "MBD2_PROTEIN_METHYL_CP_G_BINDING_DOMAIN_METHOD",
                "MDA",
                "MF_METHOD",
                "M_NASE_METHOD",
                "MSLL_METHOD",
                "OLIGO_D_T",
                "PADLOCK_PROBES_CAPTURE_METHOD",
                "PCR_METHOD",
                "POLY_A",
                "RACE_METHOD",
                "RANDOM_PCR_METHOD",
                "RANDOM_METHOD",
                "RT_PCR_METHOD",
                "REDUCED_REPRESENTATION_METHOD",
                "REPEAT_FRACTIONATION",
                "RESTRICTION_DIGEST_METHOD",
                "SIZE_FRACTIONATION_METHOD",
                "UNSPECIFIED",
                "OTHER"
              ],
              "title": "LibraryPreparationLibrarySelectionEnum",
              "type": "string"
            },
            "LibraryPreparationLibraryTypeEnum": {
              "description": "The type of the library",
              "enum": [
                "WGS",
                "WXS",
                "WCS",
                "TOTAL_RNA",
                "M_RNA",
                "MI_RNA",
                "NC_RNA",
                "ATAC",
                "METHYLATION",
                "CHROMOSOME_CONFORMATION_CAPTURE"
              ],
              "title": "LibraryPreparationLibraryTypeEnum",
              "type": "string"
            },
            "LibraryPreparationRNASeqStrandednessEnum": {
              "description": "Permitted values for library preparation RNASeq strandedness",
              "enum": [
                "SENSE",
                "ANTISENSE",
                "BOTH"
              ],
              "title": "LibraryPreparationRNASeqStrandednessEnum",
              "type": "string"
            },
            "PrimerEnum": {
              "description": "Permitted values for primer",
              "enum": [
                "OLIGO_D_T",
                "RANDOM",
                "GENE_SPECIFIC",
                "OTHER"
              ],
              "title": "PrimerEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcess": {
        "name": "SequencingProcess",
        "description": "A sequencing process linking a sample to sequencing output.",
        "anchor_point": {
          "target_class": "SequencingProcess",
          "identifier_slot": "accession",
          "root_slot": "sequencing_processes"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A sequencing process linking a sample to sequencing output.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "Key/value pairs corresponding to an entity.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "description": {
              "description": "Description of an entity.",
              "type": "string"
            },
            "index_sequence": {
              "description": "A unique nucleotide sequence that is added to a sample during library_preparation to serve as a unique identifier for the sample.",
              "type": "string"
            },
            "lane_number": {
              "description": "The numerical identifier for the lane or machine unit where a sample was located during nucleotide sequencing.",
              "type": "string"
            },
            "name": {
              "description": "The name for an entity.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "sequencing_experiment": {
              "description": "The sequencing experiment associated with an entity.",
              "type": "string"
            },
            "sequencing_lane_id": {
              "description": "Identifier of the sequencing lane. Used for batch correction.",
              "type": "string"
            },
            "sequencing_machine_id": {
              "description": "Identifier of the sequencing machine. Used for batch correction.",
              "type": "string"
            },
            "sequencing_process_files": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_run_id": {
              "description": "Identifier of the sequencing run. Used for batch correction.",
              "type": "string"
            },
            "title": {
              "description": "The title that describes an entity.",
              "type": "string"
            }
          },
          "required": [
            "description",
            "name",
            "sequencing_experiment",
            "sample",
            "alias",
            "accession",
            "sequencing_process_files"
          ],
          "title": "SequencingProcess",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            }
          }
        }
      },
      "Individual": {
        "name": "Individual",
        "description": "An Individual is a Person who is participating in a Study.",
        "anchor_point": {
          "target_class": "Individual",
          "identifier_slot": "accession",
          "root_slot": "individuals"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "An Individual is a Person who is participating in a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "ancestries": {
              "description": "A person's descent or lineage, from a person or from a population.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "biospecimens": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "geographical_region": {
              "description": "The geographical region where the Individual is located. Any demarcated area of the Earth; may be determined by both natural and human boundaries.",
              "type": "string"
            },
            "karyotype": {
              "$ref": "#/$defs/KaryotypeEnum",
              "description": "The karyotype of an individual if defined."
            },
            "phenotypic_features": {
              "description": "The Phenotypic Feature entity that is associated with this Biospecimen at the time of retrieval from the organism. Typically, a concept from Human Phenotype Ontology. For example, 'HP:0100244' indicates that the Individual - from_which_the_Biospecimen was extracted from - exhibits_'Fibrosarcoma'_as_one_of_its_phenotype.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sex": {
              "$ref": "#/$defs/IndividualSexEnum",
              "description": "The assemblage of physical properties or qualities by which male is distinguished from female; the physical difference between male and female; the distinguishing peculiarity of male or female."
            }
          },
          "required": [
            "sex",
            "alias",
            "accession",
            "biospecimens"
          ],
          "title": "Individual",
          "type": "object",
          "$defs": {
            "IndividualSexEnum": {
              "description": "The sex of an Individual as as defined in a specific medical and clinical context.",
              "enum": [
                "FEMALE_SEX_FOR_CLINICAL_USE",
                "IMAGING_SEX",
                "MALE_SEX_FOR_CLINICAL_USE",
                "SPECIFIED_SEX_FOR_CLINICAL_USE",
                "UNKNOWN_SEX_FOR_CLINICAL_USE"
              ],
              "title": "IndividualSexEnum",
              "type": "string"
            },
            "KaryotypeEnum": {
              "description": "Permitted values for karyotype",
              "enum": [
                "46_XY",
                "46_XX",
                "OTHER"
              ],
              "title": "KaryotypeEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProcessFile": {
        "name": "SequencingProcessFile",
        "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
        "anchor_point": {
          "target_class": "SequencingProcessFile",
          "identifier_slot": "accession",
          "root_slot": "sequencing_process_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SequencingProcessFile is a File that is associated with a SequencingProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sequencing_process": {
              "description": "The SequencingProcess associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sequencing_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SequencingProcessFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SequencingProtocol": {
        "name": "SequencingProtocol",
        "description": "Information about the sequencing of a sample.",
        "anchor_point": {
          "target_class": "SequencingProtocol",
          "identifier_slot": "accession",
          "root_slot": "sequencing_protocols"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "Information about the sequencing of a sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "attributes": {
              "description": "One or more attributes that further characterizes this Sequencing Protocol.",
              "items": {
                "$ref": "#/$defs/Attribute"
              },
              "type": "array"
            },
            "cell_barcode_offset": {
              "description": "The offset in sequence of the cell identifying barcode. (Eg. '0').",
              "type": "string"
            },
            "cell_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the cell barcode (eg: index1/index2/read1/read2)."
            },
            "cell_barcode_size": {
              "description": "The size of the cell identifying barcode (E.g. '16').",
              "type": "string"
            },
            "description": {
              "description": "Description about the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "flow_cell_id": {
              "description": "Flow Cell ID (eg: Experiment ID_Cell 1_Lane_1). The barcode assigned to a flow cell used in nucleotide sequencing.",
              "type": "string"
            },
            "flow_cell_type": {
              "$ref": "#/$defs/FlowCellTypeEnum",
              "description": "Type of flow cell used (e.g. S4, S2 for NovaSeq; PromethION, Flongle for Nanopore). Aparatus in the fluidic subsystem where the sheath and sample meet. Can be one of several types; jet-in-air, quartz cuvette, or a hybrid of the two. The sample flows through the center of a fluid column of sheath fluid in the flow cell."
            },
            "instrument_model": {
              "$ref": "#/$defs/InstrumentModelEnum",
              "description": "The name and model of the technology platform used to perform sequencing."
            },
            "sample_barcode_read": {
              "$ref": "#/$defs/SampleBarcodeReadEnum",
              "description": "The type of read that contains the sample barcode (eg: index1/index2/read1/read2)."
            },
            "sequencing_center": {
              "description": "Center where sample was sequenced.",
              "type": "string"
            },
            "sequencing_experiments": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sequencing_read_length": {
              "description": "Length of sequencing reads (eg: Long or short or actual number of the read length etc). The number of nucleotides successfully ordered from each side of a nucleic acid fragment obtained after the completion of a sequencing process",
              "type": "string"
            },
            "target_coverage": {
              "description": "Mean coverage for whole genome sequencing, or mean target coverage for whole exome and targeted sequencing. The number of times a particular locus (site, nucleotide, amplicon, region) was sequenced.",
              "type": "string"
            },
            "type": {
              "description": "Type of the sequencing Protocol (eg: mRNA-seq, Whole exome long-read sequencing etc).",
              "type": "string"
            },
            "umi_barcode_offset": {
              "description": "The offset in sequence of the UMI identifying barcode. (E.g. '16').",
              "type": "string"
            },
            "umi_barcode_read": {
              "$ref": "#/$defs/IndexReadEnum",
              "description": "The type of read that contains the UMI barcode (Eg: index1/index2/read1/read2)."
            },
            "umi_barcode_size": {
              "description": "The size of the UMI identifying barcode (Eg. '10').",
              "type": "string"
            }
          },
          "required": [
            "description",
            "instrument_model",
            "alias",
            "accession",
            "sequencing_experiments"
          ],
          "title": "SequencingProtocol",
          "type": "object",
          "$defs": {
            "Attribute": {
              "additionalProperties": false,
              "description": "A key/value pair that further characterizes an entity.",
              "properties": {
                "key": {
                  "description": "The key for an attribute.",
                  "type": "string"
                },
                "key_type": {
                  "description": "A semantic type that characterizes the attribute key. Usually this is a term from an ontology. For example, 'MAXO:0000616' indicates that the attribute is a measurement of oxygen saturation in the blood.",
                  "type": "string"
                },
                "value": {
                  "description": "The value for an attribute. Usually this is a numerical value (without the units).",
                  "type": "string"
                },
                "value_type": {
                  "description": "The value_type that characterizes the attribute value. Usually this is a term from an ontology that describes how to interpret the value. For example, 'SIO:001413' indicates that the value is to be interpreted as a percentage.",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "title": "Attribute",
              "type": "object"
            },
            "FlowCellTypeEnum": {
              "description": "Permitted values for flow cell type",
              "enum": [
                "ILLUMINA_NOVA_SEQ_S2",
                "ILLUMINA_NOVA_SEQ_S4",
                "PROMETH_ION",
                "FLONGLE",
                "MIN_ION",
                "GRID_ION",
                "OTHER"
              ],
              "title": "FlowCellTypeEnum",
              "type": "string"
            },
            "IndexReadEnum": {
              "description": "Permitted Values to indicate the location of a sequence component in a read or index",
              "enum": [
                "INDEX1",
                "INDEX2",
                "READ1",
                "READ2"
              ],
              "title": "IndexReadEnum",
              "type": "string"
            },
            "InstrumentModelEnum": {
              "description": "Permitted values for instrument model",
              "enum": [
                "ILLUMINA_HI_SCAN",
                "ILLUMINA_HI_SEQ_1000",
                "ILLUMINA_HI_SEQ_1500",
                "ILLUMINA_HI_SEQ_2000",
                "ILLUMINA_HI_SEQ_2500",
                "ILLUMINA_HI_SEQ_3000",
                "ILLUMINA_HI_SEQ_4000",
                "ILLUMINA_HI_SEQ_X_FIVE",
                "ILLUMINA_HI_SEQ_X_TEN",
                "ILLUMINA_HI_SEQ_X",
                "ILLUMINA_I_SCAN",
                "ILLUMINA_I_SEQ_100",
                "ILLUMINA_MINI_SEQ",
                "ILLUMINA_MI_SEQ",
                "ILLUMINA_MI_SEQ_DX",
                "ILLUMINA_MI_SEQ_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_500",
                "ILLUMINA_NEXT_SEQ_550",
                "ILLUMINA_NEXT_SEQ_550_DX",
                "ILLUMINA_NEXT_SEQ_550_DX_RESEARCH_MODE",
                "ILLUMINA_NEXT_SEQ_1000",
                "ILLUMINA_NEXT_SEQ_2000",
                "ILLUMINA_NOVA_SEQ_6000",
                "ILLUMINA_GENOME_ANALYZER",
                "ILLUMINA_GENOME_ANALYZER_II",
                "ILLUMINA_GENOME_ANALYZER_IIX",
                "ILLUMINA_HI_SCAN_SQ",
                "PAC_BIO_REVIO",
                "PAC_BIO_ONSO",
                "PAC_BIO_SEQUEL_IIE",
                "PAC_BIO_SEQUEL_II",
                "PAC_BIO_SEQUEL",
                "PAC_BIO_RS",
                "PAC_BIO_RS_II",
                "ONT_MIN_ION",
                "ONT_GRID_ION",
                "ONT_PROMETH_ION",
                "DNBSEQ_G50",
                "DNBSEQ_T7",
                "DNBSEQ_G400",
                "DNBSEQ_G400_FAST",
                "ULTIMA_UG_100",
                "OTHER"
              ],
              "title": "InstrumentModelEnum",
              "type": "string"
            },
            "SampleBarcodeReadEnum": {
              "description": "Permitted values for sample barcode read",
              "enum": [
                "INDEX1",
                "INDEX1_AND_INDEX2",
                "OTHER"
              ],
              "title": "SampleBarcodeReadEnum",
              "type": "string"
            }
          }
        }
      },
      "AnalysisProcessOutputFile": {
        "name": "AnalysisProcessOutputFile",
        "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
        "anchor_point": {
          "target_class": "AnalysisProcessOutputFile",
          "identifier_slot": "accession",
          "root_slot": "analysis_process_output_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A AnalysisProcessOutputFile is a File that is associated as an output file with an AnalysisProcess.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "analysis_process": {
              "description": "The AnalysisProcess associated with an entity.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "analysis_process",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "AnalysisProcessOutputFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "SampleFile": {
        "name": "SampleFile",
        "description": "A SampleFile is a File that is associated with a Sample.",
        "anchor_point": {
          "target_class": "SampleFile",
          "identifier_slot": "accession",
          "root_slot": "sample_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A SampleFile is a File that is associated with a Sample.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "sample": {
              "description": "The sample associated with an entity.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            }
          },
          "required": [
            "sample",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "SampleFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "StudyFile": {
        "name": "StudyFile",
        "description": "A StudyFile is a File that is associated with a Study.",
        "anchor_point": {
          "target_class": "StudyFile",
          "identifier_slot": "accession",
          "root_slot": "study_files"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "A StudyFile is a File that is associated with a Study.",
          "properties": {
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "checksum": {
              "description": "A computed value which depends on the contents of a block of data and which is transmitted or stored along with the data in order to detect corruption of the data. The receiving system recomputes the checksum based upon the received data and compares this value with the one sent with the data. If the two values are the same, the receiver has some confidence that the data was received correctly.",
              "type": "string"
            },
            "checksum_type": {
              "description": "The type of algorithm used to generate the checksum of a file.",
              "type": "string"
            },
            "dataset": {
              "description": "The Dataset associated with an entity.",
              "type": "string"
            },
            "format": {
              "$ref": "#/$defs/FileFormatEnum",
              "description": "The format of the file: BAM, SAM, CRAM, BAI, etc."
            },
            "forward_or_reverse": {
              "$ref": "#/$defs/ForwardOrReverseEnum",
              "description": "Denotes whether a submitted FASTQ file contains forward (R1) or reverse (R2) reads for paired-end sequencing. The number that identifies each read direction in a paired-end nucleotide sequencing reaction."
            },
            "name": {
              "description": "The given filename.",
              "type": "string"
            },
            "size": {
              "description": "The size of a file in bytes.",
              "type": "integer"
            },
            "study": {
              "description": "The study associated with an entity.",
              "type": "string"
            }
          },
          "required": [
            "study",
            "name",
            "format",
            "size",
            "checksum",
            "checksum_type",
            "dataset",
            "alias",
            "accession"
          ],
          "title": "StudyFile",
          "type": "object",
          "$defs": {
            "FileFormatEnum": {
              "description": "Enum to capture file types.",
              "enum": [
                "AGP",
                "BAI",
                "BAM",
                "BCF",
                "BED",
                "CRAI",
                "CRAM",
                "CSV",
                "FASTA",
                "FASTQ",
                "GFF",
                "HDF5",
                "INFO",
                "JSON",
                "MD",
                "OTHER",
                "PED",
                "SAM",
                "SFF",
                "SRF",
                "TAB",
                "TABIX",
                "TSV",
                "TXT",
                "VCF",
                "WIG"
              ],
              "title": "FileFormatEnum",
              "type": "string"
            },
            "ForwardOrReverseEnum": {
              "description": "Enum to capture whether the reads from paired-end sequencing are forward (R1) or reverse (R2).",
              "enum": [
                "FORWARD",
                "REVERSE"
              ],
              "title": "ForwardOrReverseEnum",
              "type": "string"
            }
          }
        }
      },
      "Publication": {
        "name": "Publication",
        "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
        "anchor_point": {
          "target_class": "Publication",
          "identifier_slot": "accession",
          "root_slot": "publications"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "The Publication entity represents a publication. While a publication can be any article that is published, the minimum expectation is that the publication has a valid DOI.",
          "properties": {
            "abstract": {
              "description": "The study abstract that describes the goals. Can also hold abstract from a publication related to this study.",
              "type": "string"
            },
            "accession": {
              "description": "The accession for an entity.",
              "type": "string"
            },
            "alias": {
              "description": "The alias for an entity at the time of submission.",
              "type": "string"
            },
            "author": {
              "description": "The individual who is responsible for the content of a document version.",
              "type": "string"
            },
            "doi": {
              "description": "DOI identifier of the Publication.",
              "type": "string"
            },
            "journal": {
              "description": "Name of the journal.",
              "type": "string"
            },
            "study": {
              "description": "The Study entity associated with this Publication.",
              "type": "string"
            },
            "title": {
              "description": "The title for the Publication.",
              "type": "string"
            },
            "xref": {
              "description": "One or more cross-references for this Publication.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "year": {
              "description": "Year in which the paper was published.",
              "type": "integer"
            }
          },
          "required": [
            "doi",
            "study",
            "alias",
            "accession"
          ],
          "title": "Publication",
          "type": "object",
          "$defs": {}
        }
      }
    }
  },
  {
    "name": "stats_public",
    "description": "stats_public",
    "resource_classes": {
      "DatasetStats": {
        "name": "DatasetStats",
        "description": null,
        "anchor_point": {
          "target_class": "DatasetStats",
          "identifier_slot": "accession",
          "root_slot": "dataset_stats"
        },
        "json_schema": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "additionalProperties": false,
          "description": "",
          "properties": {
            "accession": {
              "type": "string"
            },
            "dac_email": {
              "type": "string"
            },
            "experiment_summary": {
              "$ref": "#/$defs/AutoGeneratedClass6"
            },
            "file_summary": {
              "$ref": "#/$defs/AutoGeneratedClass7"
            },
            "sample_summary": {
              "$ref": "#/$defs/AutoGeneratedClass4"
            },
            "study_summary": {
              "$ref": "#/$defs/AutoGeneratedClass5"
            },
            "title": {
              "type": "string"
            },
            "types": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "accession"
          ],
          "title": "DatasetStats",
          "type": "object",
          "$defs": {
            "AutoGeneratedClass4": {
              "additionalProperties": false,
              "description": "",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "stats": {
                  "$ref": "#/$defs/AutoGeneratedClass0"
                }
              },
              "title": "AutoGeneratedClass4",
              "type": "object"
            },
            "AutoGeneratedClass5": {
              "additionalProperties": false,
              "description": "",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "stats": {
                  "$ref": "#/$defs/AutoGeneratedClass1"
                }
              },
              "title": "AutoGeneratedClass5",
              "type": "object"
            },
            "AutoGeneratedClass6": {
              "additionalProperties": false,
              "description": "",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "stats": {
                  "$ref": "#/$defs/AutoGeneratedClass2"
                }
              },
              "title": "AutoGeneratedClass6",
              "type": "object"
            },
            "AutoGeneratedClass7": {
              "additionalProperties": false,
              "description": "",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "stats": {
                  "$ref": "#/$defs/AutoGeneratedClass3"
                }
              },
              "title": "AutoGeneratedClass7",
              "type": "object"
            }
          }
        }
      }
    }
  }
]